!function(n){function t(r){if(e[r])return e[r].exports;var i=e[r]={exports:{},id:r,loaded:!1};return n[r].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var e={};return t.m=n,t.c=e,t.p="",t(0)}([function(n,t,e){function r(n){n.children&&(n.children=n.children,n.children.forEach(r),n._children=null)}function i(n){var t=y.nodes(f).reverse(),e=y.links(t);t.forEach(function(n){n.y=110*n.depth});var r=_.selectAll("g.node").data(t,function(n){return n.id||(n.id=++s)}),i=r.enter().append("g").attr("class","node").attr("transform",function(t){return"translate("+n.x0+","+n.y0+")"}).on("click",u);i.append("rect").attr("width",p).attr("height",g).attr("stroke","black").attr("stroke-width",1).style("fill",function(n){return n.size>0?v(M(n.size)):n._children?"lightsteelblue":"#fff"}),i.append("text").attr("x",p/2).attr("y",g/2).attr("dy",".35em").attr("text-anchor","middle").text(function(n){return n.name});var o=r.transition().duration(h).attr("transform",function(n){return"translate("+n.x+","+n.y+")"});o.select("rect").attr("width",p).attr("height",g).attr("stroke","black").attr("stroke-width",1).style("fill",function(n){return v(M(n.size))}),o.select("text").style("fill-opacity",1);var a=r.exit().transition().duration(h).attr("transform",function(t){return"translate("+n.x+","+n.y+")"}).remove();a.select("rect").attr("width",p).attr("height",g).attr("stroke","black").attr("stroke-width",1),a.select("text");var l=_.selectAll("path.link").data(e,function(n){return n.target.id});l.enter().insert("path","g").attr("class","link").attr("x",p/2).attr("y",g/2).attr("d",function(t){var e={x:n.x0,y:n.y0};return b({source:e,target:e})}),l.transition().duration(h).attr("d",b),l.exit().transition().duration(h).attr("d",function(t){var e={x:n.x,y:n.y};return b({source:e,target:e})}).remove(),t.forEach(function(n){n.x0=n.x,n.y0=n.y})}function u(n){n.children?(n._children=n.children,n.children=null):(n.children=n._children,n._children=null),i(n)}function o(){_.attr("transform","translate("+a.event.translate+") scale("+a.event.scale+")")}for(var a=e(1),l={top:20,right:150,bottom:20,left:150},c=(560-l.right-l.left,2e3-l.top-l.bottom),f={name:"HEAD ORG",size:15e3,children:[{name:"PM 1 OFFICE",size:7e3,children:[{name:"MAIN DEV UNIT",size:6e3,children:[{name:"SUB PM1",size:3938,children:[{name:"SUB PM2",size:8971}]},{name:"SUB PM2",size:3812},{name:"ProductA114",size:6714},{name:"ProductA115",size:7438,children:[{name:"SUB PM2",size:8971}]}]},{name:"ProductA12",size:223,children:[{name:"ProductA121",size:3534},{name:"ProductA122",size:5731},{name:"ProductA123",size:7840},{name:"ProductA124",size:5914},{name:"ProductA125",size:3416}]},{name:"ProductA13",size:123,children:[{name:"ProductA131",size:7074}]}]},{name:"ProductA2",size:3232,children:[{name:"ProductA21",size:17010}]}]},s=0,h=750,p=80,g=30,d=["#44d7a8","#2ed19c","#f2e796","#FFD363","#FFB363","#FF8363","#FF7363","#FF6364","#fc3f41","#f93e30"],v=a.scale.linear().domain(a.range(0,1,1/(d.length-1))).range(d),y=a.layout.tree().nodeSize([90,80]),m=y.nodes(f).reverse(),x=[],s=0;s<m.length;s++)m[s]&&m[s].size>0&&x.push(m[s].size);console.log(x);var M=a.scale.linear().domain(a.extent(x)).range([0,1]),b=a.svg.diagonal().projection(function(n){return[n.x+p/2,n.y+g/2]}),_=a.select("#body").append("svg").attr("width",1300).attr("height",1900).call(zm=a.behavior.zoom().scaleExtent([1,3]).on("zoom",o)).append("g").attr("transform","translate(850,10)");zm.translate([350,20]),f.x0=0,f.y0=c/2,f.children.forEach(r),i(f)},function(n,t,e){var r,i;!function(){function u(n){return n&&(n.ownerDocument||n.document||n).documentElement}function o(n){return n&&(n.ownerDocument&&n.ownerDocument.defaultView||n.document&&n||n.defaultView)}function a(n,t){return n<t?-1:n>t?1:n>=t?0:NaN}function l(n){return null===n?NaN:+n}function c(n){return!isNaN(n)}function f(n){return{left:function(t,e,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=t.length);r<i;){var u=r+i>>>1;n(t[u],e)<0?r=u+1:i=u}return r},right:function(t,e,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=t.length);r<i;){var u=r+i>>>1;n(t[u],e)>0?i=u:r=u+1}return r}}}function s(n){return n.length}function h(n){for(var t=1;n*t%1;)t*=10;return t}function p(n,t){for(var e in t)Object.defineProperty(n.prototype,e,{value:t[e],enumerable:!1})}function g(){this._=Object.create(null)}function d(n){return(n+="")===ko||n[0]===So?So+n:n}function v(n){return(n+="")[0]===So?n.slice(1):n}function y(n){return d(n)in this._}function m(n){return(n=d(n))in this._&&delete this._[n]}function x(){var n=[];for(var t in this._)n.push(v(t));return n}function M(){var n=0;for(var t in this._)++n;return n}function b(){for(var n in this._)return!1;return!0}function _(){this._=Object.create(null)}function w(n){return n}function k(n,t,e){return function(){var r=e.apply(t,arguments);return r===t?n:r}}function S(n,t){if(t in n)return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e=0,r=No.length;e<r;++e){var i=No[e]+t;if(i in n)return i}}function N(){}function E(){}function A(n){function t(){for(var t,r=e,i=-1,u=r.length;++i<u;)(t=r[i].on)&&t.apply(this,arguments);return n}var e=[],r=new g;return t.on=function(t,i){var u,o=r.get(t);return arguments.length<2?o&&o.on:(o&&(o.on=null,e=e.slice(0,u=e.indexOf(o)).concat(e.slice(u+1)),r.remove(t)),i&&e.push(r.set(t,{on:i})),n)},t}function z(){ho.event.preventDefault()}function C(){for(var n,t=ho.event;n=t.sourceEvent;)t=n;return t}function L(n){for(var t=new E,e=0,r=arguments.length;++e<r;)t[arguments[e]]=A(t);return t.of=function(e,r){return function(i){try{var u=i.sourceEvent=ho.event;i.target=n,ho.event=i,t[i.type].apply(e,r)}finally{ho.event=u}}},t}function q(n){return Ao(n,qo),n}function T(n){return"function"==typeof n?n:function(){return zo(n,this)}}function P(n){return"function"==typeof n?n:function(){return Co(n,this)}}function R(n,t){function e(){this.removeAttribute(n)}function r(){this.removeAttributeNS(n.space,n.local)}function i(){this.setAttribute(n,t)}function u(){this.setAttributeNS(n.space,n.local,t)}function o(){var e=t.apply(this,arguments);null==e?this.removeAttribute(n):this.setAttribute(n,e)}function a(){var e=t.apply(this,arguments);null==e?this.removeAttributeNS(n.space,n.local):this.setAttributeNS(n.space,n.local,e)}return n=ho.ns.qualify(n),null==t?n.local?r:e:"function"==typeof t?n.local?a:o:n.local?u:i}function D(n){return n.trim().replace(/\s+/g," ")}function U(n){return new RegExp("(?:^|\\s+)"+ho.requote(n)+"(?:\\s+|$)","g")}function j(n){return(n+"").trim().split(/^|\s+/)}function F(n,t){function e(){for(var e=-1;++e<i;)n[e](this,t)}function r(){for(var e=-1,r=t.apply(this,arguments);++e<i;)n[e](this,r)}n=j(n).map(H);var i=n.length;return"function"==typeof t?r:e}function H(n){var t=U(n);return function(e,r){if(i=e.classList)return r?i.add(n):i.remove(n);var i=e.getAttribute("class")||"";r?(t.lastIndex=0,t.test(i)||e.setAttribute("class",D(i+" "+n))):e.setAttribute("class",D(i.replace(t," ")))}}function O(n,t,e){function r(){this.style.removeProperty(n)}function i(){this.style.setProperty(n,t,e)}function u(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(n):this.style.setProperty(n,r,e)}return null==t?r:"function"==typeof t?u:i}function I(n,t){function e(){delete this[n]}function r(){this[n]=t}function i(){var e=t.apply(this,arguments);null==e?delete this[n]:this[n]=e}return null==t?e:"function"==typeof t?i:r}function Y(n){function t(){var t=this.ownerDocument,e=this.namespaceURI;return e===To&&t.documentElement.namespaceURI===To?t.createElement(n):t.createElementNS(e,n)}function e(){return this.ownerDocument.createElementNS(n.space,n.local)}return"function"==typeof n?n:(n=ho.ns.qualify(n)).local?e:t}function Z(){var n=this.parentNode;n&&n.removeChild(this)}function V(n){return{__data__:n}}function B(n){return function(){return Lo(this,n)}}function X(n){return arguments.length||(n=a),function(t,e){return t&&e?n(t.__data__,e.__data__):!t-!e}}function $(n,t){for(var e=0,r=n.length;e<r;e++)for(var i,u=n[e],o=0,a=u.length;o<a;o++)(i=u[o])&&t(i,o,e);return n}function W(n){return Ao(n,Ro),n}function J(n){var t,e;return function(r,i,u){var o,a=n[u].update,l=a.length;for(u!=e&&(e=u,t=0),i>=t&&(t=i+1);!(o=a[t])&&++t<l;);return o}}function G(n,t,e){function r(){var t=this[o];t&&(this.removeEventListener(n,t,t.$),delete this[o])}function i(){var i=l(t,go(arguments));r.call(this),this.addEventListener(n,this[o]=i,i.$=e),i._=t}function u(){var t,e=new RegExp("^__on([^.]+)"+ho.requote(n)+"$");for(var r in this)if(t=r.match(e)){var i=this[r];this.removeEventListener(t[1],i,i.$),delete this[r]}}var o="__on"+n,a=n.indexOf("."),l=K;a>0&&(n=n.slice(0,a));var c=Do.get(n);return c&&(n=c,l=Q),a?t?i:r:t?N:u}function K(n,t){return function(e){var r=ho.event;ho.event=e,t[0]=this.__data__;try{n.apply(this,t)}finally{ho.event=r}}}function Q(n,t){var e=K(n,t);return function(n){var t=this,r=n.relatedTarget;r&&(r===t||8&r.compareDocumentPosition(t))||e.call(t,n)}}function nn(n){var t=".dragsuppress-"+ ++jo,e="click"+t,r=ho.select(o(n)).on("touchmove"+t,z).on("dragstart"+t,z).on("selectstart"+t,z);if(null==Uo&&(Uo=!("onselectstart"in n)&&S(n.style,"userSelect")),Uo){var i=u(n).style,a=i[Uo];i[Uo]="none"}return function(n){if(r.on(t,null),Uo&&(i[Uo]=a),n){var u=function(){r.on(e,null)};r.on(e,function(){z(),u()},!0),setTimeout(u,0)}}}function tn(n,t){t.changedTouches&&(t=t.changedTouches[0]);var e=n.ownerSVGElement||n;if(e.createSVGPoint){var r=e.createSVGPoint();if(Fo<0){var i=o(n);if(i.scrollX||i.scrollY){e=ho.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var u=e[0][0].getScreenCTM();Fo=!(u.f||u.e),e.remove()}}return Fo?(r.x=t.pageX,r.y=t.pageY):(r.x=t.clientX,r.y=t.clientY),r=r.matrixTransform(n.getScreenCTM().inverse()),[r.x,r.y]}var a=n.getBoundingClientRect();return[t.clientX-a.left-n.clientLeft,t.clientY-a.top-n.clientTop]}function en(){return ho.event.changedTouches[0].identifier}function rn(n){return n>0?1:n<0?-1:0}function un(n,t,e){return(t[0]-n[0])*(e[1]-n[1])-(t[1]-n[1])*(e[0]-n[0])}function on(n){return n>1?0:n<-1?Io:Math.acos(n)}function an(n){return n>1?Vo:n<-1?-Vo:Math.asin(n)}function ln(n){return((n=Math.exp(n))-1/n)/2}function cn(n){return((n=Math.exp(n))+1/n)/2}function fn(n){return((n=Math.exp(2*n))-1)/(n+1)}function sn(n){return(n=Math.sin(n/2))*n}function hn(){}function pn(n,t,e){return this instanceof pn?(this.h=+n,this.s=+t,void(this.l=+e)):arguments.length<2?n instanceof pn?new pn(n.h,n.s,n.l):En(""+n,An,pn):new pn(n,t,e)}function gn(n,t,e){function r(n){return n>360?n-=360:n<0&&(n+=360),n<60?u+(o-u)*n/60:n<180?o:n<240?u+(o-u)*(240-n)/60:u}function i(n){return Math.round(255*r(n))}var u,o;return n=isNaN(n)?0:(n%=360)<0?n+360:n,t=isNaN(t)?0:t<0?0:t>1?1:t,e=e<0?0:e>1?1:e,o=e<=.5?e*(1+t):e+t-e*t,u=2*e-o,new wn(i(n+120),i(n),i(n-120))}function dn(n,t,e){return this instanceof dn?(this.h=+n,this.c=+t,void(this.l=+e)):arguments.length<2?n instanceof dn?new dn(n.h,n.c,n.l):n instanceof yn?xn(n.l,n.a,n.b):xn((n=zn((n=ho.rgb(n)).r,n.g,n.b)).l,n.a,n.b):new dn(n,t,e)}function vn(n,t,e){return isNaN(n)&&(n=0),isNaN(t)&&(t=0),new yn(e,Math.cos(n*=Bo)*t,Math.sin(n)*t)}function yn(n,t,e){return this instanceof yn?(this.l=+n,this.a=+t,void(this.b=+e)):arguments.length<2?n instanceof yn?new yn(n.l,n.a,n.b):n instanceof dn?vn(n.h,n.c,n.l):zn((n=wn(n)).r,n.g,n.b):new yn(n,t,e)}function mn(n,t,e){var r=(n+16)/116,i=r+t/500,u=r-e/200;return i=Mn(i)*ra,r=Mn(r)*ia,u=Mn(u)*ua,new wn(_n(3.2404542*i-1.5371385*r-.4985314*u),_n(-.969266*i+1.8760108*r+.041556*u),_n(.0556434*i-.2040259*r+1.0572252*u))}function xn(n,t,e){return n>0?new dn(Math.atan2(e,t)*Xo,Math.sqrt(t*t+e*e),n):new dn(NaN,NaN,n)}function Mn(n){return n>.206893034?n*n*n:(n-4/29)/7.787037}function bn(n){return n>.008856?Math.pow(n,1/3):7.787037*n+4/29}function _n(n){return Math.round(255*(n<=.00304?12.92*n:1.055*Math.pow(n,1/2.4)-.055))}function wn(n,t,e){return this instanceof wn?(this.r=~~n,this.g=~~t,void(this.b=~~e)):arguments.length<2?n instanceof wn?new wn(n.r,n.g,n.b):En(""+n,wn,gn):new wn(n,t,e)}function kn(n){return new wn(n>>16,n>>8&255,255&n)}function Sn(n){return kn(n)+""}function Nn(n){return n<16?"0"+Math.max(0,n).toString(16):Math.min(255,n).toString(16)}function En(n,t,e){var r,i,u,o=0,a=0,l=0;if(r=/([a-z]+)\((.*)\)/.exec(n=n.toLowerCase()))switch(i=r[2].split(","),r[1]){case"hsl":return e(parseFloat(i[0]),parseFloat(i[1])/100,parseFloat(i[2])/100);case"rgb":return t(Ln(i[0]),Ln(i[1]),Ln(i[2]))}return(u=la.get(n))?t(u.r,u.g,u.b):(null==n||"#"!==n.charAt(0)||isNaN(u=parseInt(n.slice(1),16))||(4===n.length?(o=(3840&u)>>4,o|=o>>4,a=240&u,a|=a>>4,l=15&u,l|=l<<4):7===n.length&&(o=(16711680&u)>>16,a=(65280&u)>>8,l=255&u)),t(o,a,l))}function An(n,t,e){var r,i,u=Math.min(n/=255,t/=255,e/=255),o=Math.max(n,t,e),a=o-u,l=(o+u)/2;return a?(i=l<.5?a/(o+u):a/(2-o-u),r=n==o?(t-e)/a+(t<e?6:0):t==o?(e-n)/a+2:(n-t)/a+4,r*=60):(r=NaN,i=l>0&&l<1?0:r),new pn(r,i,l)}function zn(n,t,e){n=Cn(n),t=Cn(t),e=Cn(e);var r=bn((.4124564*n+.3575761*t+.1804375*e)/ra),i=bn((.2126729*n+.7151522*t+.072175*e)/ia),u=bn((.0193339*n+.119192*t+.9503041*e)/ua);return yn(116*i-16,500*(r-i),200*(i-u))}function Cn(n){return(n/=255)<=.04045?n/12.92:Math.pow((n+.055)/1.055,2.4)}function Ln(n){var t=parseFloat(n);return"%"===n.charAt(n.length-1)?Math.round(2.55*t):t}function qn(n){return"function"==typeof n?n:function(){return n}}function Tn(n){return function(t,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=null),Pn(t,e,n,r)}}function Pn(n,t,e,r){function i(){var n,t=l.status;if(!t&&Dn(l)||t>=200&&t<300||304===t){try{n=e.call(u,l)}catch(n){return void o.error.call(u,n)}o.load.call(u,n)}else o.error.call(u,l)}var u={},o=ho.dispatch("beforesend","progress","load","error"),a={},l=new XMLHttpRequest,c=null;return!this.XDomainRequest||"withCredentials"in l||!/^(http(s)?:)?\/\//.test(n)||(l=new XDomainRequest),"onload"in l?l.onload=l.onerror=i:l.onreadystatechange=function(){l.readyState>3&&i()},l.onprogress=function(n){var t=ho.event;ho.event=n;try{o.progress.call(u,l)}finally{ho.event=t}},u.header=function(n,t){return n=(n+"").toLowerCase(),arguments.length<2?a[n]:(null==t?delete a[n]:a[n]=t+"",u)},u.mimeType=function(n){return arguments.length?(t=null==n?null:n+"",u):t},u.responseType=function(n){return arguments.length?(c=n,u):c},u.response=function(n){return e=n,u},["get","post"].forEach(function(n){u[n]=function(){return u.send.apply(u,[n].concat(go(arguments)))}}),u.send=function(e,r,i){if(2===arguments.length&&"function"==typeof r&&(i=r,r=null),l.open(e,n,!0),null==t||"accept"in a||(a.accept=t+",*/*"),l.setRequestHeader)for(var f in a)l.setRequestHeader(f,a[f]);return null!=t&&l.overrideMimeType&&l.overrideMimeType(t),null!=c&&(l.responseType=c),null!=i&&u.on("error",i).on("load",function(n){i(null,n)}),o.beforesend.call(u,l),l.send(null==r?null:r),u},u.abort=function(){return l.abort(),u},ho.rebind(u,o,"on"),null==r?u:u.get(Rn(r))}function Rn(n){return 1===n.length?function(t,e){n(null==t?e:null)}:n}function Dn(n){var t=n.responseType;return t&&"text"!==t?n.response:n.responseText}function Un(n,t,e){var r=arguments.length;r<2&&(t=0),r<3&&(e=Date.now());var i=e+t,u={c:n,t:i,n:null};return fa?fa.n=u:ca=u,fa=u,sa||(ha=clearTimeout(ha),sa=1,pa(jn)),u}function jn(){var n=Fn(),t=Hn()-n;t>24?(isFinite(t)&&(clearTimeout(ha),ha=setTimeout(jn,t)),sa=0):(sa=1,pa(jn))}function Fn(){for(var n=Date.now(),t=ca;t;)n>=t.t&&t.c(n-t.t)&&(t.c=null),t=t.n;return n}function Hn(){for(var n,t=ca,e=1/0;t;)t.c?(t.t<e&&(e=t.t),t=(n=t).n):t=n?n.n=t.n:ca=t.n;return fa=n,e}function On(n,t){return t-(n?Math.ceil(Math.log(n)/Math.LN10):1)}function In(n,t){var e=Math.pow(10,3*wo(8-t));return{scale:t>8?function(n){return n/e}:function(n){return n*e},symbol:n}}function Yn(n){var t=n.decimal,e=n.thousands,r=n.grouping,i=n.currency,u=r&&e?function(n,t){for(var i=n.length,u=[],o=0,a=r[0],l=0;i>0&&a>0&&(l+a+1>t&&(a=Math.max(1,t-l)),u.push(n.substring(i-=a,i+a)),!((l+=a+1)>t));)a=r[o=(o+1)%r.length];return u.reverse().join(e)}:w;return function(n){var e=da.exec(n),r=e[1]||" ",o=e[2]||">",a=e[3]||"-",l=e[4]||"",c=e[5],f=+e[6],s=e[7],h=e[8],p=e[9],g=1,d="",v="",y=!1,m=!0;switch(h&&(h=+h.substring(1)),(c||"0"===r&&"="===o)&&(c=r="0",o="="),p){case"n":s=!0,p="g";break;case"%":g=100,v="%",p="f";break;case"p":g=100,v="%",p="r";break;case"b":case"o":case"x":case"X":"#"===l&&(d="0"+p.toLowerCase());case"c":m=!1;case"d":y=!0,h=0;break;case"s":g=-1,p="r"}"$"===l&&(d=i[0],v=i[1]),"r"!=p||h||(p="g"),null!=h&&("g"==p?h=Math.max(1,Math.min(21,h)):"e"!=p&&"f"!=p||(h=Math.max(0,Math.min(20,h)))),p=va.get(p)||Zn;var x=c&&s;return function(n){var e=v;if(y&&n%1)return"";var i=n<0||0===n&&1/n<0?(n=-n,"-"):"-"===a?"":a;if(g<0){var l=ho.formatPrefix(n,h);n=l.scale(n),e=l.symbol+v}else n*=g;n=p(n,h);var M,b,_=n.lastIndexOf(".");if(_<0){var w=m?n.lastIndexOf("e"):-1;w<0?(M=n,b=""):(M=n.substring(0,w),b=n.substring(w))}else M=n.substring(0,_),b=t+n.substring(_+1);!c&&s&&(M=u(M,1/0));var k=d.length+M.length+b.length+(x?0:i.length),S=k<f?new Array(k=f-k+1).join(r):"";return x&&(M=u(S+M,S.length?f-b.length:1/0)),i+=d,n=M+b,("<"===o?i+n+S:">"===o?S+i+n:"^"===o?S.substring(0,k>>=1)+i+n+S.substring(k):i+(x?n:S+n))+e}}}function Zn(n){return n+""}function Vn(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function Bn(n,t,e){function r(t){var e=n(t),r=u(e,1);return t-e<r-t?e:r}function i(e){return t(e=n(new ma(e-1)),1),e}function u(n,e){return t(n=new ma(+n),e),n}function o(n,r,u){var o=i(n),a=[];if(u>1)for(;o<r;)e(o)%u||a.push(new Date(+o)),t(o,1);else for(;o<r;)a.push(new Date(+o)),t(o,1);return a}function a(n,t,e){try{ma=Vn;var r=new Vn;return r._=n,o(r,t,e)}finally{ma=Date}}n.floor=n,n.round=r,n.ceil=i,n.offset=u,n.range=o;var l=n.utc=Xn(n);return l.floor=l,l.round=Xn(r),l.ceil=Xn(i),l.offset=Xn(u),l.range=a,n}function Xn(n){return function(t,e){try{ma=Vn;var r=new Vn;return r._=t,n(r,e)._}finally{ma=Date}}}function $n(n){function t(n){function t(t){for(var e,i,u,o=[],a=-1,l=0;++a<r;)37===n.charCodeAt(a)&&(o.push(n.slice(l,a)),null!=(i=Ma[e=n.charAt(++a)])&&(e=n.charAt(++a)),(u=A[e])&&(e=u(t,null==i?"e"===e?" ":"0":i)),o.push(e),l=a+1);return o.push(n.slice(l,a)),o.join("")}var r=n.length;return t.parse=function(t){var r={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null},i=e(r,n,t,0);if(i!=t.length)return null;"p"in r&&(r.H=r.H%12+12*r.p);var u=null!=r.Z&&ma!==Vn,o=new(u?Vn:ma);return"j"in r?o.setFullYear(r.y,0,r.j):"W"in r||"U"in r?("w"in r||(r.w="W"in r?1:0),o.setFullYear(r.y,0,1),o.setFullYear(r.y,0,"W"in r?(r.w+6)%7+7*r.W-(o.getDay()+5)%7:r.w+7*r.U-(o.getDay()+6)%7)):o.setFullYear(r.y,r.m,r.d),o.setHours(r.H+(r.Z/100|0),r.M+r.Z%100,r.S,r.L),u?o._:o},t.toString=function(){return n},t}function e(n,t,e,r){for(var i,u,o,a=0,l=t.length,c=e.length;a<l;){if(r>=c)return-1;if(i=t.charCodeAt(a++),37===i){if(o=t.charAt(a++),u=z[o in Ma?t.charAt(a++):o],!u||(r=u(n,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}function r(n,t,e){_.lastIndex=0;var r=_.exec(t.slice(e));return r?(n.w=w.get(r[0].toLowerCase()),e+r[0].length):-1}function i(n,t,e){M.lastIndex=0;var r=M.exec(t.slice(e));return r?(n.w=b.get(r[0].toLowerCase()),e+r[0].length):-1}function u(n,t,e){N.lastIndex=0;var r=N.exec(t.slice(e));return r?(n.m=E.get(r[0].toLowerCase()),e+r[0].length):-1}function o(n,t,e){k.lastIndex=0;var r=k.exec(t.slice(e));return r?(n.m=S.get(r[0].toLowerCase()),e+r[0].length):-1}function a(n,t,r){return e(n,A.c.toString(),t,r)}function l(n,t,r){return e(n,A.x.toString(),t,r)}function c(n,t,r){return e(n,A.X.toString(),t,r)}function f(n,t,e){var r=x.get(t.slice(e,e+=2).toLowerCase());return null==r?-1:(n.p=r,e)}var s=n.dateTime,h=n.date,p=n.time,g=n.periods,d=n.days,v=n.shortDays,y=n.months,m=n.shortMonths;t.utc=function(n){function e(n){try{ma=Vn;var t=new ma;return t._=n,r(t)}finally{ma=Date}}var r=t(n);return e.parse=function(n){try{ma=Vn;var t=r.parse(n);return t&&t._}finally{ma=Date}},e.toString=r.toString,e},t.multi=t.utc.multi=gt;var x=ho.map(),M=Jn(d),b=Gn(d),_=Jn(v),w=Gn(v),k=Jn(y),S=Gn(y),N=Jn(m),E=Gn(m);g.forEach(function(n,t){x.set(n.toLowerCase(),t)});var A={a:function(n){return v[n.getDay()]},A:function(n){return d[n.getDay()]},b:function(n){return m[n.getMonth()]},B:function(n){return y[n.getMonth()]},c:t(s),d:function(n,t){return Wn(n.getDate(),t,2)},e:function(n,t){return Wn(n.getDate(),t,2)},H:function(n,t){return Wn(n.getHours(),t,2)},I:function(n,t){return Wn(n.getHours()%12||12,t,2)},j:function(n,t){return Wn(1+ya.dayOfYear(n),t,3)},L:function(n,t){return Wn(n.getMilliseconds(),t,3)},m:function(n,t){return Wn(n.getMonth()+1,t,2)},M:function(n,t){return Wn(n.getMinutes(),t,2)},p:function(n){return g[+(n.getHours()>=12)]},S:function(n,t){return Wn(n.getSeconds(),t,2)},U:function(n,t){return Wn(ya.sundayOfYear(n),t,2)},w:function(n){return n.getDay()},W:function(n,t){return Wn(ya.mondayOfYear(n),t,2)},x:t(h),X:t(p),y:function(n,t){return Wn(n.getFullYear()%100,t,2)},Y:function(n,t){return Wn(n.getFullYear()%1e4,t,4)},Z:ht,"%":function(){return"%"}},z={a:r,A:i,b:u,B:o,c:a,d:ot,e:ot,H:lt,I:lt,j:at,L:st,m:ut,M:ct,p:f,S:ft,U:Qn,w:Kn,W:nt,x:l,X:c,y:et,Y:tt,Z:rt,"%":pt};return t}function Wn(n,t,e){var r=n<0?"-":"",i=(r?-n:n)+"",u=i.length;return r+(u<e?new Array(e-u+1).join(t)+i:i)}function Jn(n){return new RegExp("^(?:"+n.map(ho.requote).join("|")+")","i")}function Gn(n){for(var t=new g,e=-1,r=n.length;++e<r;)t.set(n[e].toLowerCase(),e);return t}function Kn(n,t,e){ba.lastIndex=0;var r=ba.exec(t.slice(e,e+1));return r?(n.w=+r[0],e+r[0].length):-1}function Qn(n,t,e){ba.lastIndex=0;var r=ba.exec(t.slice(e));return r?(n.U=+r[0],e+r[0].length):-1}function nt(n,t,e){ba.lastIndex=0;var r=ba.exec(t.slice(e));return r?(n.W=+r[0],e+r[0].length):-1}function tt(n,t,e){ba.lastIndex=0;var r=ba.exec(t.slice(e,e+4));return r?(n.y=+r[0],e+r[0].length):-1}function et(n,t,e){ba.lastIndex=0;var r=ba.exec(t.slice(e,e+2));return r?(n.y=it(+r[0]),e+r[0].length):-1}function rt(n,t,e){return/^[+-]\d{4}$/.test(t=t.slice(e,e+5))?(n.Z=-t,e+5):-1}function it(n){return n+(n>68?1900:2e3)}function ut(n,t,e){ba.lastIndex=0;var r=ba.exec(t.slice(e,e+2));return r?(n.m=r[0]-1,e+r[0].length):-1}function ot(n,t,e){ba.lastIndex=0;var r=ba.exec(t.slice(e,e+2));return r?(n.d=+r[0],e+r[0].length):-1}function at(n,t,e){ba.lastIndex=0;var r=ba.exec(t.slice(e,e+3));return r?(n.j=+r[0],e+r[0].length):-1}function lt(n,t,e){ba.lastIndex=0;var r=ba.exec(t.slice(e,e+2));return r?(n.H=+r[0],e+r[0].length):-1}function ct(n,t,e){ba.lastIndex=0;var r=ba.exec(t.slice(e,e+2));return r?(n.M=+r[0],e+r[0].length):-1}function ft(n,t,e){ba.lastIndex=0;var r=ba.exec(t.slice(e,e+2));return r?(n.S=+r[0],e+r[0].length):-1}function st(n,t,e){ba.lastIndex=0;var r=ba.exec(t.slice(e,e+3));return r?(n.L=+r[0],e+r[0].length):-1}function ht(n){var t=n.getTimezoneOffset(),e=t>0?"-":"+",r=wo(t)/60|0,i=wo(t)%60;return e+Wn(r,"0",2)+Wn(i,"0",2)}function pt(n,t,e){_a.lastIndex=0;var r=_a.exec(t.slice(e,e+1));return r?e+r[0].length:-1}function gt(n){for(var t=n.length,e=-1;++e<t;)n[e][0]=this(n[e][0]);return function(t){for(var e=0,r=n[e];!r[1](t);)r=n[++e];return r[0](t)}}function dt(){}function vt(n,t,e){var r=e.s=n+t,i=r-n,u=r-i;e.t=n-u+(t-i)}function yt(n,t){n&&Na.hasOwnProperty(n.type)&&Na[n.type](n,t)}function mt(n,t,e){var r,i=-1,u=n.length-e;for(t.lineStart();++i<u;)r=n[i],t.point(r[0],r[1],r[2]);t.lineEnd()}function xt(n,t){var e=-1,r=n.length;for(t.polygonStart();++e<r;)mt(n[e],t,1);t.polygonEnd()}function Mt(){function n(n,t){n*=Bo,t=t*Bo/2+Io/4;var e=n-r,o=e>=0?1:-1,a=o*e,l=Math.cos(t),c=Math.sin(t),f=u*c,s=i*l+f*Math.cos(a),h=f*o*Math.sin(a);Aa.add(Math.atan2(h,s)),r=n,i=l,u=c}var t,e,r,i,u;za.point=function(o,a){za.point=n,r=(t=o)*Bo,i=Math.cos(a=(e=a)*Bo/2+Io/4),u=Math.sin(a)},za.lineEnd=function(){n(t,e)}}function bt(n){var t=n[0],e=n[1],r=Math.cos(e);return[r*Math.cos(t),r*Math.sin(t),Math.sin(e)]}function _t(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function wt(n,t){return[n[1]*t[2]-n[2]*t[1],n[2]*t[0]-n[0]*t[2],n[0]*t[1]-n[1]*t[0]]}function kt(n,t){n[0]+=t[0],n[1]+=t[1],n[2]+=t[2]}function St(n,t){return[n[0]*t,n[1]*t,n[2]*t]}function Nt(n){var t=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/=t,n[1]/=t,n[2]/=t}function Et(n){return[Math.atan2(n[1],n[0]),an(n[2])]}function At(n,t){return wo(n[0]-t[0])<Ho&&wo(n[1]-t[1])<Ho}function zt(n,t){n*=Bo;var e=Math.cos(t*=Bo);Ct(e*Math.cos(n),e*Math.sin(n),Math.sin(t))}function Ct(n,t,e){++Ca,qa+=(n-qa)/Ca,Ta+=(t-Ta)/Ca,Pa+=(e-Pa)/Ca}function Lt(){function n(n,i){n*=Bo;var u=Math.cos(i*=Bo),o=u*Math.cos(n),a=u*Math.sin(n),l=Math.sin(i),c=Math.atan2(Math.sqrt((c=e*l-r*a)*c+(c=r*o-t*l)*c+(c=t*a-e*o)*c),t*o+e*a+r*l);La+=c,Ra+=c*(t+(t=o)),Da+=c*(e+(e=a)),Ua+=c*(r+(r=l)),Ct(t,e,r)}var t,e,r;Oa.point=function(i,u){i*=Bo;var o=Math.cos(u*=Bo);t=o*Math.cos(i),e=o*Math.sin(i),r=Math.sin(u),Oa.point=n,Ct(t,e,r)}}function qt(){Oa.point=zt}function Tt(){function n(n,t){n*=Bo;var e=Math.cos(t*=Bo),o=e*Math.cos(n),a=e*Math.sin(n),l=Math.sin(t),c=i*l-u*a,f=u*o-r*l,s=r*a-i*o,h=Math.sqrt(c*c+f*f+s*s),p=r*o+i*a+u*l,g=h&&-on(p)/h,d=Math.atan2(h,p);ja+=g*c,Fa+=g*f,Ha+=g*s,La+=d,Ra+=d*(r+(r=o)),Da+=d*(i+(i=a)),Ua+=d*(u+(u=l)),Ct(r,i,u)}var t,e,r,i,u;Oa.point=function(o,a){t=o,e=a,Oa.point=n,o*=Bo;var l=Math.cos(a*=Bo);r=l*Math.cos(o),i=l*Math.sin(o),u=Math.sin(a),Ct(r,i,u)},Oa.lineEnd=function(){n(t,e),Oa.lineEnd=qt,Oa.point=zt}}function Pt(n,t){function e(e,r){return e=n(e,r),t(e[0],e[1])}return n.invert&&t.invert&&(e.invert=function(e,r){return e=t.invert(e,r),e&&n.invert(e[0],e[1])}),e}function Rt(){return!0}function Dt(n,t,e,r,i){var u=[],o=[];if(n.forEach(function(n){if(!((t=n.length-1)<=0)){var t,e=n[0],r=n[t];if(At(e,r)){i.lineStart();for(var a=0;a<t;++a)i.point((e=n[a])[0],e[1]);return void i.lineEnd()}var l=new jt(e,n,null,!0),c=new jt(e,null,l,!1);l.o=c,u.push(l),o.push(c),l=new jt(r,n,null,!1),c=new jt(r,null,l,!0),l.o=c,u.push(l),o.push(c)}}),o.sort(t),Ut(u),Ut(o),u.length){for(var a=0,l=e,c=o.length;a<c;++a)o[a].e=l=!l;for(var f,s,h=u[0];;){for(var p=h,g=!0;p.v;)if((p=p.n)===h)return;f=p.z,i.lineStart();do{if(p.v=p.o.v=!0,p.e){if(g)for(var a=0,c=f.length;a<c;++a)i.point((s=f[a])[0],s[1]);else r(p.x,p.n.x,1,i);p=p.n}else{if(g){f=p.p.z;for(var a=f.length-1;a>=0;--a)i.point((s=f[a])[0],s[1])}else r(p.x,p.p.x,-1,i);p=p.p}p=p.o,f=p.z,g=!g}while(!p.v);i.lineEnd()}}}function Ut(n){if(t=n.length){for(var t,e,r=0,i=n[0];++r<t;)i.n=e=n[r],e.p=i,i=e;i.n=e=n[0],e.p=i}}function jt(n,t,e,r){this.x=n,this.z=t,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Ft(n,t,e,r){return function(i,u){function o(t,e){var r=i(t,e);n(t=r[0],e=r[1])&&u.point(t,e)}function a(n,t){var e=i(n,t);v.point(e[0],e[1])}function l(){m.point=a,v.lineStart()}function c(){m.point=o,v.lineEnd()}function f(n,t){d.push([n,t]);var e=i(n,t);M.point(e[0],e[1])}function s(){M.lineStart(),d=[]}function h(){f(d[0][0],d[0][1]),M.lineEnd();var n,t=M.clean(),e=x.buffer(),r=e.length;if(d.pop(),g.push(d),d=null,r)if(1&t){n=e[0];var i,r=n.length-1,o=-1;if(r>0){for(b||(u.polygonStart(),b=!0),u.lineStart();++o<r;)u.point((i=n[o])[0],i[1]);u.lineEnd()}}else r>1&&2&t&&e.push(e.pop().concat(e.shift())),p.push(e.filter(Ht))}var p,g,d,v=t(u),y=i.invert(r[0],r[1]),m={point:o,lineStart:l,lineEnd:c,polygonStart:function(){m.point=f,m.lineStart=s,m.lineEnd=h,p=[],g=[]},polygonEnd:function(){m.point=o,m.lineStart=l,m.lineEnd=c,p=ho.merge(p);var n=Bt(y,g);p.length?(b||(u.polygonStart(),b=!0),Dt(p,It,n,e,u)):n&&(b||(u.polygonStart(),b=!0),u.lineStart(),e(null,null,1,u),u.lineEnd()),b&&(u.polygonEnd(),b=!1),p=g=null},sphere:function(){u.polygonStart(),u.lineStart(),e(null,null,1,u),u.lineEnd(),u.polygonEnd()}},x=Ot(),M=t(x),b=!1;return m}}function Ht(n){return n.length>1}function Ot(){var n,t=[];return{lineStart:function(){t.push(n=[])},point:function(t,e){n.push([t,e])},lineEnd:N,buffer:function(){var e=t;return t=[],n=null,e},rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))}}}function It(n,t){return((n=n.x)[0]<0?n[1]-Vo-Ho:Vo-n[1])-((t=t.x)[0]<0?t[1]-Vo-Ho:Vo-t[1])}function Yt(n){var t,e=NaN,r=NaN,i=NaN;return{lineStart:function(){n.lineStart(),t=1},point:function(u,o){var a=u>0?Io:-Io,l=wo(u-e);wo(l-Io)<Ho?(n.point(e,r=(r+o)/2>0?Vo:-Vo),n.point(i,r),n.lineEnd(),n.lineStart(),n.point(a,r),n.point(u,r),t=0):i!==a&&l>=Io&&(wo(e-i)<Ho&&(e-=i*Ho),wo(u-a)<Ho&&(u-=a*Ho),r=Zt(e,r,u,o),n.point(i,r),n.lineEnd(),n.lineStart(),n.point(a,r),t=0),n.point(e=u,r=o),i=a},lineEnd:function(){n.lineEnd(),e=r=NaN},clean:function(){return 2-t}}}function Zt(n,t,e,r){var i,u,o=Math.sin(n-e);return wo(o)>Ho?Math.atan((Math.sin(t)*(u=Math.cos(r))*Math.sin(e)-Math.sin(r)*(i=Math.cos(t))*Math.sin(n))/(i*u*o)):(t+r)/2}function Vt(n,t,e,r){var i;if(null==n)i=e*Vo,r.point(-Io,i),r.point(0,i),r.point(Io,i),r.point(Io,0),r.point(Io,-i),r.point(0,-i),r.point(-Io,-i),r.point(-Io,0),r.point(-Io,i);else if(wo(n[0]-t[0])>Ho){var u=n[0]<t[0]?Io:-Io;i=e*u/2,r.point(-u,i),r.point(0,i),r.point(u,i)}else r.point(t[0],t[1])}function Bt(n,t){var e=n[0],r=n[1],i=[Math.sin(e),-Math.cos(e),0],u=0,o=0;Aa.reset();for(var a=0,l=t.length;a<l;++a){var c=t[a],f=c.length;if(f)for(var s=c[0],h=s[0],p=s[1]/2+Io/4,g=Math.sin(p),d=Math.cos(p),v=1;;){v===f&&(v=0),n=c[v];var y=n[0],m=n[1]/2+Io/4,x=Math.sin(m),M=Math.cos(m),b=y-h,_=b>=0?1:-1,w=_*b,k=w>Io,S=g*x;if(Aa.add(Math.atan2(S*_*Math.sin(w),d*M+S*Math.cos(w))),u+=k?b+_*Yo:b,k^h>=e^y>=e){var N=wt(bt(s),bt(n));Nt(N);var E=wt(i,N);Nt(E);var A=(k^b>=0?-1:1)*an(E[2]);(r>A||r===A&&(N[0]||N[1]))&&(o+=k^b>=0?1:-1)}if(!v++)break;h=y,g=x,d=M,s=n}}return(u<-Ho||u<Ho&&Aa<-Ho)^1&o}function Xt(n){function t(n,t){return Math.cos(n)*Math.cos(t)>u}function e(n){var e,u,l,c,f;return{lineStart:function(){c=l=!1,f=1},point:function(s,h){var p,g=[s,h],d=t(s,h),v=o?d?0:i(s,h):d?i(s+(s<0?Io:-Io),h):0;if(!e&&(c=l=d)&&n.lineStart(),d!==l&&(p=r(e,g),(At(e,p)||At(g,p))&&(g[0]+=Ho,g[1]+=Ho,d=t(g[0],g[1]))),d!==l)f=0,d?(n.lineStart(),p=r(g,e),n.point(p[0],p[1])):(p=r(e,g),n.point(p[0],p[1]),n.lineEnd()),e=p;else if(a&&e&&o^d){var y;v&u||!(y=r(g,e,!0))||(f=0,o?(n.lineStart(),n.point(y[0][0],y[0][1]),n.point(y[1][0],y[1][1]),n.lineEnd()):(n.point(y[1][0],y[1][1]),n.lineEnd(),n.lineStart(),n.point(y[0][0],y[0][1])))}!d||e&&At(e,g)||n.point(g[0],g[1]),e=g,l=d,u=v},lineEnd:function(){l&&n.lineEnd(),e=null},clean:function(){return f|(c&&l)<<1}}}function r(n,t,e){var r=bt(n),i=bt(t),o=[1,0,0],a=wt(r,i),l=_t(a,a),c=a[0],f=l-c*c;if(!f)return!e&&n;var s=u*l/f,h=-u*c/f,p=wt(o,a),g=St(o,s),d=St(a,h);kt(g,d);var v=p,y=_t(g,v),m=_t(v,v),x=y*y-m*(_t(g,g)-1);if(!(x<0)){var M=Math.sqrt(x),b=St(v,(-y-M)/m);if(kt(b,g),b=Et(b),!e)return b;var _,w=n[0],k=t[0],S=n[1],N=t[1];k<w&&(_=w,w=k,k=_);var E=k-w,A=wo(E-Io)<Ho,z=A||E<Ho;if(!A&&N<S&&(_=S,S=N,N=_),z?A?S+N>0^b[1]<(wo(b[0]-w)<Ho?S:N):S<=b[1]&&b[1]<=N:E>Io^(w<=b[0]&&b[0]<=k)){var C=St(v,(-y+M)/m);return kt(C,g),[b,Et(C)]}}}function i(t,e){var r=o?n:Io-n,i=0;return t<-r?i|=1:t>r&&(i|=2),e<-r?i|=4:e>r&&(i|=8),i}var u=Math.cos(n),o=u>0,a=wo(u)>Ho,l=Me(n,6*Bo);return Ft(t,e,l,o?[0,-n]:[-Io,n-Io])}function $t(n,t,e,r){return function(i){var u,o=i.a,a=i.b,l=o.x,c=o.y,f=a.x,s=a.y,h=0,p=1,g=f-l,d=s-c;if(u=n-l,g||!(u>0)){if(u/=g,g<0){if(u<h)return;u<p&&(p=u)}else if(g>0){if(u>p)return;u>h&&(h=u)}if(u=e-l,g||!(u<0)){if(u/=g,g<0){if(u>p)return;u>h&&(h=u)}else if(g>0){if(u<h)return;u<p&&(p=u)}if(u=t-c,d||!(u>0)){if(u/=d,d<0){if(u<h)return;u<p&&(p=u)}else if(d>0){if(u>p)return;u>h&&(h=u)}if(u=r-c,d||!(u<0)){if(u/=d,d<0){if(u>p)return;u>h&&(h=u)}else if(d>0){if(u<h)return;u<p&&(p=u)}return h>0&&(i.a={x:l+h*g,y:c+h*d}),p<1&&(i.b={x:l+p*g,y:c+p*d}),i}}}}}}function Wt(n,t,e,r){function i(r,i){return wo(r[0]-n)<Ho?i>0?0:3:wo(r[0]-e)<Ho?i>0?2:1:wo(r[1]-t)<Ho?i>0?1:0:i>0?3:2}function u(n,t){return o(n.x,t.x)}function o(n,t){var e=i(n,1),r=i(t,1);return e!==r?e-r:0===e?t[1]-n[1]:1===e?n[0]-t[0]:2===e?n[1]-t[1]:t[0]-n[0]}return function(a){function l(n){for(var t=0,e=v.length,r=n[1],i=0;i<e;++i)for(var u,o=1,a=v[i],l=a.length,c=a[0];o<l;++o)u=a[o],c[1]<=r?u[1]>r&&un(c,u,n)>0&&++t:u[1]<=r&&un(c,u,n)<0&&--t,
c=u;return 0!==t}function c(u,a,l,c){var f=0,s=0;if(null==u||(f=i(u,l))!==(s=i(a,l))||o(u,a)<0^l>0){do c.point(0===f||3===f?n:e,f>1?r:t);while((f=(f+l+4)%4)!==s)}else c.point(a[0],a[1])}function f(i,u){return n<=i&&i<=e&&t<=u&&u<=r}function s(n,t){f(n,t)&&a.point(n,t)}function h(){z.point=g,v&&v.push(y=[]),k=!0,w=!1,b=_=NaN}function p(){d&&(g(m,x),M&&w&&E.rejoin(),d.push(E.buffer())),z.point=s,w&&a.lineEnd()}function g(n,t){n=Math.max(-Ya,Math.min(Ya,n)),t=Math.max(-Ya,Math.min(Ya,t));var e=f(n,t);if(v&&y.push([n,t]),k)m=n,x=t,M=e,k=!1,e&&(a.lineStart(),a.point(n,t));else if(e&&w)a.point(n,t);else{var r={a:{x:b,y:_},b:{x:n,y:t}};A(r)?(w||(a.lineStart(),a.point(r.a.x,r.a.y)),a.point(r.b.x,r.b.y),e||a.lineEnd(),S=!1):e&&(a.lineStart(),a.point(n,t),S=!1)}b=n,_=t,w=e}var d,v,y,m,x,M,b,_,w,k,S,N=a,E=Ot(),A=$t(n,t,e,r),z={point:s,lineStart:h,lineEnd:p,polygonStart:function(){a=E,d=[],v=[],S=!0},polygonEnd:function(){a=N,d=ho.merge(d);var t=l([n,r]),e=S&&t,i=d.length;(e||i)&&(a.polygonStart(),e&&(a.lineStart(),c(null,null,1,a),a.lineEnd()),i&&Dt(d,u,t,c,a),a.polygonEnd()),d=v=y=null}};return z}}function Jt(n){var t=0,e=Io/3,r=he(n),i=r(t,e);return i.parallels=function(n){return arguments.length?r(t=n[0]*Io/180,e=n[1]*Io/180):[t/Io*180,e/Io*180]},i}function Gt(n,t){function e(n,t){var e=Math.sqrt(u-2*i*Math.sin(t))/i;return[e*Math.sin(n*=i),o-e*Math.cos(n)]}var r=Math.sin(n),i=(r+Math.sin(t))/2,u=1+r*(2*i-r),o=Math.sqrt(u)/i;return e.invert=function(n,t){var e=o-t;return[Math.atan2(n,e)/i,an((u-(n*n+e*e)*i*i)/(2*i))]},e}function Kt(){function n(n,t){Va+=i*n-r*t,r=n,i=t}var t,e,r,i;Ja.point=function(u,o){Ja.point=n,t=r=u,e=i=o},Ja.lineEnd=function(){n(t,e)}}function Qt(n,t){n<Ba&&(Ba=n),n>$a&&($a=n),t<Xa&&(Xa=t),t>Wa&&(Wa=t)}function ne(){function n(n,t){o.push("M",n,",",t,u)}function t(n,t){o.push("M",n,",",t),a.point=e}function e(n,t){o.push("L",n,",",t)}function r(){a.point=n}function i(){o.push("Z")}var u=te(4.5),o=[],a={point:n,lineStart:function(){a.point=t},lineEnd:r,polygonStart:function(){a.lineEnd=i},polygonEnd:function(){a.lineEnd=r,a.point=n},pointRadius:function(n){return u=te(n),a},result:function(){if(o.length){var n=o.join("");return o=[],n}}};return a}function te(n){return"m0,"+n+"a"+n+","+n+" 0 1,1 0,"+-2*n+"a"+n+","+n+" 0 1,1 0,"+2*n+"z"}function ee(n,t){qa+=n,Ta+=t,++Pa}function re(){function n(n,r){var i=n-t,u=r-e,o=Math.sqrt(i*i+u*u);Ra+=o*(t+n)/2,Da+=o*(e+r)/2,Ua+=o,ee(t=n,e=r)}var t,e;Ka.point=function(r,i){Ka.point=n,ee(t=r,e=i)}}function ie(){Ka.point=ee}function ue(){function n(n,t){var e=n-r,u=t-i,o=Math.sqrt(e*e+u*u);Ra+=o*(r+n)/2,Da+=o*(i+t)/2,Ua+=o,o=i*n-r*t,ja+=o*(r+n),Fa+=o*(i+t),Ha+=3*o,ee(r=n,i=t)}var t,e,r,i;Ka.point=function(u,o){Ka.point=n,ee(t=r=u,e=i=o)},Ka.lineEnd=function(){n(t,e)}}function oe(n){function t(t,e){n.moveTo(t+o,e),n.arc(t,e,o,0,Yo)}function e(t,e){n.moveTo(t,e),a.point=r}function r(t,e){n.lineTo(t,e)}function i(){a.point=t}function u(){n.closePath()}var o=4.5,a={point:t,lineStart:function(){a.point=e},lineEnd:i,polygonStart:function(){a.lineEnd=u},polygonEnd:function(){a.lineEnd=i,a.point=t},pointRadius:function(n){return o=n,a},result:N};return a}function ae(n){function t(n){return(a?r:e)(n)}function e(t){return fe(t,function(e,r){e=n(e,r),t.point(e[0],e[1])})}function r(t){function e(e,r){e=n(e,r),t.point(e[0],e[1])}function r(){x=NaN,k.point=u,t.lineStart()}function u(e,r){var u=bt([e,r]),o=n(e,r);i(x,M,m,b,_,w,x=o[0],M=o[1],m=e,b=u[0],_=u[1],w=u[2],a,t),t.point(x,M)}function o(){k.point=e,t.lineEnd()}function l(){r(),k.point=c,k.lineEnd=f}function c(n,t){u(s=n,h=t),p=x,g=M,d=b,v=_,y=w,k.point=u}function f(){i(x,M,m,b,_,w,p,g,s,d,v,y,a,t),k.lineEnd=o,o()}var s,h,p,g,d,v,y,m,x,M,b,_,w,k={point:e,lineStart:r,lineEnd:o,polygonStart:function(){t.polygonStart(),k.lineStart=l},polygonEnd:function(){t.polygonEnd(),k.lineStart=r}};return k}function i(t,e,r,a,l,c,f,s,h,p,g,d,v,y){var m=f-t,x=s-e,M=m*m+x*x;if(M>4*u&&v--){var b=a+p,_=l+g,w=c+d,k=Math.sqrt(b*b+_*_+w*w),S=Math.asin(w/=k),N=wo(wo(w)-1)<Ho||wo(r-h)<Ho?(r+h)/2:Math.atan2(_,b),E=n(N,S),A=E[0],z=E[1],C=A-t,L=z-e,q=x*C-m*L;(q*q/M>u||wo((m*C+x*L)/M-.5)>.3||a*p+l*g+c*d<o)&&(i(t,e,r,a,l,c,A,z,N,b/=k,_/=k,w,v,y),y.point(A,z),i(A,z,N,b,_,w,f,s,h,p,g,d,v,y))}}var u=.5,o=Math.cos(30*Bo),a=16;return t.precision=function(n){return arguments.length?(a=(u=n*n)>0&&16,t):Math.sqrt(u)},t}function le(n){var t=ae(function(t,e){return n([t*Xo,e*Xo])});return function(n){return pe(t(n))}}function ce(n){this.stream=n}function fe(n,t){return{point:t,sphere:function(){n.sphere()},lineStart:function(){n.lineStart()},lineEnd:function(){n.lineEnd()},polygonStart:function(){n.polygonStart()},polygonEnd:function(){n.polygonEnd()}}}function se(n){return he(function(){return n})()}function he(n){function t(n){return n=a(n[0]*Bo,n[1]*Bo),[n[0]*h+l,c-n[1]*h]}function e(n){return n=a.invert((n[0]-l)/h,(c-n[1])/h),n&&[n[0]*Xo,n[1]*Xo]}function r(){a=Pt(o=ve(y,m,x),u);var n=u(d,v);return l=p-n[0]*h,c=g+n[1]*h,i()}function i(){return f&&(f.valid=!1,f=null),t}var u,o,a,l,c,f,s=ae(function(n,t){return n=u(n,t),[n[0]*h+l,c-n[1]*h]}),h=150,p=480,g=250,d=0,v=0,y=0,m=0,x=0,M=Ia,b=w,_=null,k=null;return t.stream=function(n){return f&&(f.valid=!1),f=pe(M(o,s(b(n)))),f.valid=!0,f},t.clipAngle=function(n){return arguments.length?(M=null==n?(_=n,Ia):Xt((_=+n)*Bo),i()):_},t.clipExtent=function(n){return arguments.length?(k=n,b=n?Wt(n[0][0],n[0][1],n[1][0],n[1][1]):w,i()):k},t.scale=function(n){return arguments.length?(h=+n,r()):h},t.translate=function(n){return arguments.length?(p=+n[0],g=+n[1],r()):[p,g]},t.center=function(n){return arguments.length?(d=n[0]%360*Bo,v=n[1]%360*Bo,r()):[d*Xo,v*Xo]},t.rotate=function(n){return arguments.length?(y=n[0]%360*Bo,m=n[1]%360*Bo,x=n.length>2?n[2]%360*Bo:0,r()):[y*Xo,m*Xo,x*Xo]},ho.rebind(t,s,"precision"),function(){return u=n.apply(this,arguments),t.invert=u.invert&&e,r()}}function pe(n){return fe(n,function(t,e){n.point(t*Bo,e*Bo)})}function ge(n,t){return[n,t]}function de(n,t){return[n>Io?n-Yo:n<-Io?n+Yo:n,t]}function ve(n,t,e){return n?t||e?Pt(me(n),xe(t,e)):me(n):t||e?xe(t,e):de}function ye(n){return function(t,e){return t+=n,[t>Io?t-Yo:t<-Io?t+Yo:t,e]}}function me(n){var t=ye(n);return t.invert=ye(-n),t}function xe(n,t){function e(n,t){var e=Math.cos(t),a=Math.cos(n)*e,l=Math.sin(n)*e,c=Math.sin(t),f=c*r+a*i;return[Math.atan2(l*u-f*o,a*r-c*i),an(f*u+l*o)]}var r=Math.cos(n),i=Math.sin(n),u=Math.cos(t),o=Math.sin(t);return e.invert=function(n,t){var e=Math.cos(t),a=Math.cos(n)*e,l=Math.sin(n)*e,c=Math.sin(t),f=c*u-l*o;return[Math.atan2(l*u+c*o,a*r+f*i),an(f*r-a*i)]},e}function Me(n,t){var e=Math.cos(n),r=Math.sin(n);return function(i,u,o,a){var l=o*t;null!=i?(i=be(e,i),u=be(e,u),(o>0?i<u:i>u)&&(i+=o*Yo)):(i=n+o*Yo,u=n-.5*l);for(var c,f=i;o>0?f>u:f<u;f-=l)a.point((c=Et([e,-r*Math.cos(f),-r*Math.sin(f)]))[0],c[1])}}function be(n,t){var e=bt(t);e[0]-=n,Nt(e);var r=on(-e[1]);return((-e[2]<0?-r:r)+2*Math.PI-Ho)%(2*Math.PI)}function _e(n,t,e){var r=ho.range(n,t-Ho,e).concat(t);return function(n){return r.map(function(t){return[n,t]})}}function we(n,t,e){var r=ho.range(n,t-Ho,e).concat(t);return function(n){return r.map(function(t){return[t,n]})}}function ke(n){return n.source}function Se(n){return n.target}function Ne(n,t,e,r){var i=Math.cos(t),u=Math.sin(t),o=Math.cos(r),a=Math.sin(r),l=i*Math.cos(n),c=i*Math.sin(n),f=o*Math.cos(e),s=o*Math.sin(e),h=2*Math.asin(Math.sqrt(sn(r-t)+i*o*sn(e-n))),p=1/Math.sin(h),g=h?function(n){var t=Math.sin(n*=h)*p,e=Math.sin(h-n)*p,r=e*l+t*f,i=e*c+t*s,o=e*u+t*a;return[Math.atan2(i,r)*Xo,Math.atan2(o,Math.sqrt(r*r+i*i))*Xo]}:function(){return[n*Xo,t*Xo]};return g.distance=h,g}function Ee(){function n(n,i){var u=Math.sin(i*=Bo),o=Math.cos(i),a=wo((n*=Bo)-t),l=Math.cos(a);Qa+=Math.atan2(Math.sqrt((a=o*Math.sin(a))*a+(a=r*u-e*o*l)*a),e*u+r*o*l),t=n,e=u,r=o}var t,e,r;nl.point=function(i,u){t=i*Bo,e=Math.sin(u*=Bo),r=Math.cos(u),nl.point=n},nl.lineEnd=function(){nl.point=nl.lineEnd=N}}function Ae(n,t){function e(t,e){var r=Math.cos(t),i=Math.cos(e),u=n(r*i);return[u*i*Math.sin(t),u*Math.sin(e)]}return e.invert=function(n,e){var r=Math.sqrt(n*n+e*e),i=t(r),u=Math.sin(i),o=Math.cos(i);return[Math.atan2(n*u,r*o),Math.asin(r&&e*u/r)]},e}function ze(n,t){function e(n,t){o>0?t<-Vo+Ho&&(t=-Vo+Ho):t>Vo-Ho&&(t=Vo-Ho);var e=o/Math.pow(i(t),u);return[e*Math.sin(u*n),o-e*Math.cos(u*n)]}var r=Math.cos(n),i=function(n){return Math.tan(Io/4+n/2)},u=n===t?Math.sin(n):Math.log(r/Math.cos(t))/Math.log(i(t)/i(n)),o=r*Math.pow(i(n),u)/u;return u?(e.invert=function(n,t){var e=o-t,r=rn(u)*Math.sqrt(n*n+e*e);return[Math.atan2(n,e)/u,2*Math.atan(Math.pow(o/r,1/u))-Vo]},e):Le}function Ce(n,t){function e(n,t){var e=u-t;return[e*Math.sin(i*n),u-e*Math.cos(i*n)]}var r=Math.cos(n),i=n===t?Math.sin(n):(r-Math.cos(t))/(t-n),u=r/i+n;return wo(i)<Ho?ge:(e.invert=function(n,t){var e=u-t;return[Math.atan2(n,e)/i,u-rn(i)*Math.sqrt(n*n+e*e)]},e)}function Le(n,t){return[n,Math.log(Math.tan(Io/4+t/2))]}function qe(n){var t,e=se(n),r=e.scale,i=e.translate,u=e.clipExtent;return e.scale=function(){var n=r.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.translate=function(){var n=i.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.clipExtent=function(n){var o=u.apply(e,arguments);if(o===e){if(t=null==n){var a=Io*r(),l=i();u([[l[0]-a,l[1]-a],[l[0]+a,l[1]+a]])}}else t&&(o=null);return o},e.clipExtent(null)}function Te(n,t){return[Math.log(Math.tan(Io/4+t/2)),-n]}function Pe(n){return n[0]}function Re(n){return n[1]}function De(n){for(var t=n.length,e=[0,1],r=2,i=2;i<t;i++){for(;r>1&&un(n[e[r-2]],n[e[r-1]],n[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function Ue(n,t){return n[0]-t[0]||n[1]-t[1]}function je(n,t,e){return(e[0]-t[0])*(n[1]-t[1])<(e[1]-t[1])*(n[0]-t[0])}function Fe(n,t,e,r){var i=n[0],u=e[0],o=t[0]-i,a=r[0]-u,l=n[1],c=e[1],f=t[1]-l,s=r[1]-c,h=(a*(l-c)-s*(i-u))/(s*o-a*f);return[i+h*o,l+h*f]}function He(n){var t=n[0],e=n[n.length-1];return!(t[0]-e[0]||t[1]-e[1])}function Oe(){lr(this),this.edge=this.site=this.circle=null}function Ie(n){var t=hl.pop()||new Oe;return t.site=n,t}function Ye(n){Qe(n),cl.remove(n),hl.push(n),lr(n)}function Ze(n){var t=n.circle,e=t.x,r=t.cy,i={x:e,y:r},u=n.P,o=n.N,a=[n];Ye(n);for(var l=u;l.circle&&wo(e-l.circle.x)<Ho&&wo(r-l.circle.cy)<Ho;)u=l.P,a.unshift(l),Ye(l),l=u;a.unshift(l),Qe(l);for(var c=o;c.circle&&wo(e-c.circle.x)<Ho&&wo(r-c.circle.cy)<Ho;)o=c.N,a.push(c),Ye(c),c=o;a.push(c),Qe(c);var f,s=a.length;for(f=1;f<s;++f)c=a[f],l=a[f-1],ur(c.edge,l.site,c.site,i);l=a[0],c=a[s-1],c.edge=rr(l.site,c.site,null,i),Ke(l),Ke(c)}function Ve(n){for(var t,e,r,i,u=n.x,o=n.y,a=cl._;a;)if(r=Be(a,o)-u,r>Ho)a=a.L;else{if(i=u-Xe(a,o),!(i>Ho)){r>-Ho?(t=a.P,e=a):i>-Ho?(t=a,e=a.N):t=e=a;break}if(!a.R){t=a;break}a=a.R}var l=Ie(n);if(cl.insert(t,l),t||e){if(t===e)return Qe(t),e=Ie(t.site),cl.insert(l,e),l.edge=e.edge=rr(t.site,l.site),Ke(t),void Ke(e);if(!e)return void(l.edge=rr(t.site,l.site));Qe(t),Qe(e);var c=t.site,f=c.x,s=c.y,h=n.x-f,p=n.y-s,g=e.site,d=g.x-f,v=g.y-s,y=2*(h*v-p*d),m=h*h+p*p,x=d*d+v*v,M={x:(v*m-p*x)/y+f,y:(h*x-d*m)/y+s};ur(e.edge,c,g,M),l.edge=rr(c,n,null,M),e.edge=rr(n,g,null,M),Ke(t),Ke(e)}}function Be(n,t){var e=n.site,r=e.x,i=e.y,u=i-t;if(!u)return r;var o=n.P;if(!o)return-(1/0);e=o.site;var a=e.x,l=e.y,c=l-t;if(!c)return a;var f=a-r,s=1/u-1/c,h=f/c;return s?(-h+Math.sqrt(h*h-2*s*(f*f/(-2*c)-l+c/2+i-u/2)))/s+r:(r+a)/2}function Xe(n,t){var e=n.N;if(e)return Be(e,t);var r=n.site;return r.y===t?r.x:1/0}function $e(n){this.site=n,this.edges=[]}function We(n){for(var t,e,r,i,u,o,a,l,c,f,s=n[0][0],h=n[1][0],p=n[0][1],g=n[1][1],d=ll,v=d.length;v--;)if(u=d[v],u&&u.prepare())for(a=u.edges,l=a.length,o=0;o<l;)f=a[o].end(),r=f.x,i=f.y,c=a[++o%l].start(),t=c.x,e=c.y,(wo(r-t)>Ho||wo(i-e)>Ho)&&(a.splice(o,0,new or(ir(u.site,f,wo(r-s)<Ho&&g-i>Ho?{x:s,y:wo(t-s)<Ho?e:g}:wo(i-g)<Ho&&h-r>Ho?{x:wo(e-g)<Ho?t:h,y:g}:wo(r-h)<Ho&&i-p>Ho?{x:h,y:wo(t-h)<Ho?e:p}:wo(i-p)<Ho&&r-s>Ho?{x:wo(e-p)<Ho?t:s,y:p}:null),u.site,null)),++l)}function Je(n,t){return t.angle-n.angle}function Ge(){lr(this),this.x=this.y=this.arc=this.site=this.cy=null}function Ke(n){var t=n.P,e=n.N;if(t&&e){var r=t.site,i=n.site,u=e.site;if(r!==u){var o=i.x,a=i.y,l=r.x-o,c=r.y-a,f=u.x-o,s=u.y-a,h=2*(l*s-c*f);if(!(h>=-Oo)){var p=l*l+c*c,g=f*f+s*s,d=(s*p-c*g)/h,v=(l*g-f*p)/h,s=v+a,y=pl.pop()||new Ge;y.arc=n,y.site=i,y.x=d+o,y.y=s+Math.sqrt(d*d+v*v),y.cy=s,n.circle=y;for(var m=null,x=sl._;x;)if(y.y<x.y||y.y===x.y&&y.x<=x.x){if(!x.L){m=x.P;break}x=x.L}else{if(!x.R){m=x;break}x=x.R}sl.insert(m,y),m||(fl=y)}}}}function Qe(n){var t=n.circle;t&&(t.P||(fl=t.N),sl.remove(t),pl.push(t),lr(t),n.circle=null)}function nr(n){for(var t,e=al,r=$t(n[0][0],n[0][1],n[1][0],n[1][1]),i=e.length;i--;)t=e[i],(!tr(t,n)||!r(t)||wo(t.a.x-t.b.x)<Ho&&wo(t.a.y-t.b.y)<Ho)&&(t.a=t.b=null,e.splice(i,1))}function tr(n,t){var e=n.b;if(e)return!0;var r,i,u=n.a,o=t[0][0],a=t[1][0],l=t[0][1],c=t[1][1],f=n.l,s=n.r,h=f.x,p=f.y,g=s.x,d=s.y,v=(h+g)/2,y=(p+d)/2;if(d===p){if(v<o||v>=a)return;if(h>g){if(u){if(u.y>=c)return}else u={x:v,y:l};e={x:v,y:c}}else{if(u){if(u.y<l)return}else u={x:v,y:c};e={x:v,y:l}}}else if(r=(h-g)/(d-p),i=y-r*v,r<-1||r>1)if(h>g){if(u){if(u.y>=c)return}else u={x:(l-i)/r,y:l};e={x:(c-i)/r,y:c}}else{if(u){if(u.y<l)return}else u={x:(c-i)/r,y:c};e={x:(l-i)/r,y:l}}else if(p<d){if(u){if(u.x>=a)return}else u={x:o,y:r*o+i};e={x:a,y:r*a+i}}else{if(u){if(u.x<o)return}else u={x:a,y:r*a+i};e={x:o,y:r*o+i}}return n.a=u,n.b=e,!0}function er(n,t){this.l=n,this.r=t,this.a=this.b=null}function rr(n,t,e,r){var i=new er(n,t);return al.push(i),e&&ur(i,n,t,e),r&&ur(i,t,n,r),ll[n.i].edges.push(new or(i,n,t)),ll[t.i].edges.push(new or(i,t,n)),i}function ir(n,t,e){var r=new er(n,null);return r.a=t,r.b=e,al.push(r),r}function ur(n,t,e,r){n.a||n.b?n.l===e?n.b=r:n.a=r:(n.a=r,n.l=t,n.r=e)}function or(n,t,e){var r=n.a,i=n.b;this.edge=n,this.site=t,this.angle=e?Math.atan2(e.y-t.y,e.x-t.x):n.l===t?Math.atan2(i.x-r.x,r.y-i.y):Math.atan2(r.x-i.x,i.y-r.y)}function ar(){this._=null}function lr(n){n.U=n.C=n.L=n.R=n.P=n.N=null}function cr(n,t){var e=t,r=t.R,i=e.U;i?i.L===e?i.L=r:i.R=r:n._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function fr(n,t){var e=t,r=t.L,i=e.U;i?i.L===e?i.L=r:i.R=r:n._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function sr(n){for(;n.L;)n=n.L;return n}function hr(n,t){var e,r,i,u=n.sort(pr).pop();for(al=[],ll=new Array(n.length),cl=new ar,sl=new ar;;)if(i=fl,u&&(!i||u.y<i.y||u.y===i.y&&u.x<i.x))u.x===e&&u.y===r||(ll[u.i]=new $e(u),Ve(u),e=u.x,r=u.y),u=n.pop();else{if(!i)break;Ze(i.arc)}t&&(nr(t),We(t));var o={cells:ll,edges:al};return cl=sl=al=ll=null,o}function pr(n,t){return t.y-n.y||t.x-n.x}function gr(n,t,e){return(n.x-e.x)*(t.y-n.y)-(n.x-t.x)*(e.y-n.y)}function dr(n){return n.x}function vr(n){return n.y}function yr(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function mr(n,t,e,r,i,u){if(!n(t,e,r,i,u)){var o=.5*(e+i),a=.5*(r+u),l=t.nodes;l[0]&&mr(n,l[0],e,r,o,a),l[1]&&mr(n,l[1],o,r,i,a),l[2]&&mr(n,l[2],e,a,o,u),l[3]&&mr(n,l[3],o,a,i,u)}}function xr(n,t,e,r,i,u,o){var a,l=1/0;return function n(c,f,s,h,p){if(!(f>u||s>o||h<r||p<i)){if(g=c.point){var g,d=t-c.x,v=e-c.y,y=d*d+v*v;if(y<l){var m=Math.sqrt(l=y);r=t-m,i=e-m,u=t+m,o=e+m,a=g}}for(var x=c.nodes,M=.5*(f+h),b=.5*(s+p),_=t>=M,w=e>=b,k=w<<1|_,S=k+4;k<S;++k)if(c=x[3&k])switch(3&k){case 0:n(c,f,s,M,b);break;case 1:n(c,M,s,h,b);break;case 2:n(c,f,b,M,p);break;case 3:n(c,M,b,h,p)}}}(n,r,i,u,o),a}function Mr(n,t){n=ho.rgb(n),t=ho.rgb(t);var e=n.r,r=n.g,i=n.b,u=t.r-e,o=t.g-r,a=t.b-i;return function(n){return"#"+Nn(Math.round(e+u*n))+Nn(Math.round(r+o*n))+Nn(Math.round(i+a*n))}}function br(n,t){var e,r={},i={};for(e in n)e in t?r[e]=kr(n[e],t[e]):i[e]=n[e];for(e in t)e in n||(i[e]=t[e]);return function(n){for(e in r)i[e]=r[e](n);return i}}function _r(n,t){return n=+n,t=+t,function(e){return n*(1-e)+t*e}}function wr(n,t){var e,r,i,u=dl.lastIndex=vl.lastIndex=0,o=-1,a=[],l=[];for(n+="",t+="";(e=dl.exec(n))&&(r=vl.exec(t));)(i=r.index)>u&&(i=t.slice(u,i),a[o]?a[o]+=i:a[++o]=i),(e=e[0])===(r=r[0])?a[o]?a[o]+=r:a[++o]=r:(a[++o]=null,l.push({i:o,x:_r(e,r)})),u=vl.lastIndex;return u<t.length&&(i=t.slice(u),a[o]?a[o]+=i:a[++o]=i),a.length<2?l[0]?(t=l[0].x,function(n){return t(n)+""}):function(){return t}:(t=l.length,function(n){for(var e,r=0;r<t;++r)a[(e=l[r]).i]=e.x(n);return a.join("")})}function kr(n,t){for(var e,r=ho.interpolators.length;--r>=0&&!(e=ho.interpolators[r](n,t)););return e}function Sr(n,t){var e,r=[],i=[],u=n.length,o=t.length,a=Math.min(n.length,t.length);for(e=0;e<a;++e)r.push(kr(n[e],t[e]));for(;e<u;++e)i[e]=n[e];for(;e<o;++e)i[e]=t[e];return function(n){for(e=0;e<a;++e)i[e]=r[e](n);return i}}function Nr(n){return function(t){return t<=0?0:t>=1?1:n(t)}}function Er(n){return function(t){return 1-n(1-t)}}function Ar(n){return function(t){return.5*(t<.5?n(2*t):2-n(2-2*t))}}function zr(n){return n*n}function Cr(n){return n*n*n}function Lr(n){if(n<=0)return 0;if(n>=1)return 1;var t=n*n,e=t*n;return 4*(n<.5?e:3*(n-t)+e-.75)}function qr(n){return function(t){return Math.pow(t,n)}}function Tr(n){return 1-Math.cos(n*Vo)}function Pr(n){return Math.pow(2,10*(n-1))}function Rr(n){return 1-Math.sqrt(1-n*n)}function Dr(n,t){var e;return arguments.length<2&&(t=.45),arguments.length?e=t/Yo*Math.asin(1/n):(n=1,e=t/4),function(r){return 1+n*Math.pow(2,-10*r)*Math.sin((r-e)*Yo/t)}}function Ur(n){return n||(n=1.70158),function(t){return t*t*((n+1)*t-n)}}function jr(n){return n<1/2.75?7.5625*n*n:n<2/2.75?7.5625*(n-=1.5/2.75)*n+.75:n<2.5/2.75?7.5625*(n-=2.25/2.75)*n+.9375:7.5625*(n-=2.625/2.75)*n+.984375}function Fr(n,t){n=ho.hcl(n),t=ho.hcl(t);var e=n.h,r=n.c,i=n.l,u=t.h-e,o=t.c-r,a=t.l-i;return isNaN(o)&&(o=0,r=isNaN(r)?t.c:r),isNaN(u)?(u=0,e=isNaN(e)?t.h:e):u>180?u-=360:u<-180&&(u+=360),function(n){return vn(e+u*n,r+o*n,i+a*n)+""}}function Hr(n,t){n=ho.hsl(n),t=ho.hsl(t);var e=n.h,r=n.s,i=n.l,u=t.h-e,o=t.s-r,a=t.l-i;return isNaN(o)&&(o=0,r=isNaN(r)?t.s:r),isNaN(u)?(u=0,e=isNaN(e)?t.h:e):u>180?u-=360:u<-180&&(u+=360),function(n){return gn(e+u*n,r+o*n,i+a*n)+""}}function Or(n,t){n=ho.lab(n),t=ho.lab(t);var e=n.l,r=n.a,i=n.b,u=t.l-e,o=t.a-r,a=t.b-i;return function(n){return mn(e+u*n,r+o*n,i+a*n)+""}}function Ir(n,t){return t-=n,function(e){return Math.round(n+t*e)}}function Yr(n){var t=[n.a,n.b],e=[n.c,n.d],r=Vr(t),i=Zr(t,e),u=Vr(Br(e,t,-i))||0;t[0]*e[1]<e[0]*t[1]&&(t[0]*=-1,t[1]*=-1,r*=-1,i*=-1),this.rotate=(r?Math.atan2(t[1],t[0]):Math.atan2(-e[0],e[1]))*Xo,this.translate=[n.e,n.f],this.scale=[r,u],this.skew=u?Math.atan2(i,u)*Xo:0}function Zr(n,t){return n[0]*t[0]+n[1]*t[1]}function Vr(n){var t=Math.sqrt(Zr(n,n));return t&&(n[0]/=t,n[1]/=t),t}function Br(n,t,e){return n[0]+=e*t[0],n[1]+=e*t[1],n}function Xr(n){return n.length?n.pop()+",":""}function $r(n,t,e,r){if(n[0]!==t[0]||n[1]!==t[1]){var i=e.push("translate(",null,",",null,")");r.push({i:i-4,x:_r(n[0],t[0])},{i:i-2,x:_r(n[1],t[1])})}else(t[0]||t[1])&&e.push("translate("+t+")")}function Wr(n,t,e,r){n!==t?(n-t>180?t+=360:t-n>180&&(n+=360),r.push({i:e.push(Xr(e)+"rotate(",null,")")-2,x:_r(n,t)})):t&&e.push(Xr(e)+"rotate("+t+")")}function Jr(n,t,e,r){n!==t?r.push({i:e.push(Xr(e)+"skewX(",null,")")-2,x:_r(n,t)}):t&&e.push(Xr(e)+"skewX("+t+")")}function Gr(n,t,e,r){if(n[0]!==t[0]||n[1]!==t[1]){var i=e.push(Xr(e)+"scale(",null,",",null,")");r.push({i:i-4,x:_r(n[0],t[0])},{i:i-2,x:_r(n[1],t[1])})}else 1===t[0]&&1===t[1]||e.push(Xr(e)+"scale("+t+")")}function Kr(n,t){var e=[],r=[];return n=ho.transform(n),t=ho.transform(t),$r(n.translate,t.translate,e,r),Wr(n.rotate,t.rotate,e,r),Jr(n.skew,t.skew,e,r),Gr(n.scale,t.scale,e,r),n=t=null,function(n){for(var t,i=-1,u=r.length;++i<u;)e[(t=r[i]).i]=t.x(n);return e.join("")}}function Qr(n,t){return t=(t-=n=+n)||1/t,function(e){return(e-n)/t}}function ni(n,t){return t=(t-=n=+n)||1/t,function(e){return Math.max(0,Math.min(1,(e-n)/t))}}function ti(n){for(var t=n.source,e=n.target,r=ri(t,e),i=[t];t!==r;)t=t.parent,i.push(t);for(var u=i.length;e!==r;)i.splice(u,0,e),e=e.parent;return i}function ei(n){for(var t=[],e=n.parent;null!=e;)t.push(n),n=e,e=e.parent;return t.push(n),t}function ri(n,t){if(n===t)return n;for(var e=ei(n),r=ei(t),i=e.pop(),u=r.pop(),o=null;i===u;)o=i,i=e.pop(),u=r.pop();return o}function ii(n){n.fixed|=2}function ui(n){n.fixed&=-7}function oi(n){n.fixed|=4,n.px=n.x,n.py=n.y}function ai(n){n.fixed&=-5}function li(n,t,e){var r=0,i=0;if(n.charge=0,!n.leaf)for(var u,o=n.nodes,a=o.length,l=-1;++l<a;)u=o[l],null!=u&&(li(u,t,e),n.charge+=u.charge,r+=u.charge*u.cx,i+=u.charge*u.cy);if(n.point){n.leaf||(n.point.x+=Math.random()-.5,n.point.y+=Math.random()-.5);var c=t*e[n.point.index];n.charge+=n.pointCharge=c,r+=c*n.point.x,i+=c*n.point.y}n.cx=r/n.charge,n.cy=i/n.charge}function ci(n,t){return ho.rebind(n,t,"sort","children","value"),n.nodes=n,n.links=di,n}function fi(n,t){for(var e=[n];null!=(n=e.pop());)if(t(n),(i=n.children)&&(r=i.length))for(var r,i;--r>=0;)e.push(i[r])}function si(n,t){for(var e=[n],r=[];null!=(n=e.pop());)if(r.push(n),(u=n.children)&&(i=u.length))for(var i,u,o=-1;++o<i;)e.push(u[o]);for(;null!=(n=r.pop());)t(n)}function hi(n){return n.children}function pi(n){return n.value}function gi(n,t){return t.value-n.value}function di(n){return ho.merge(n.map(function(n){return(n.children||[]).map(function(t){return{source:n,target:t}})}))}function vi(n){return n.x}function yi(n){return n.y}function mi(n,t,e){n.y0=t,n.y=e}function xi(n){return ho.range(n.length)}function Mi(n){for(var t=-1,e=n[0].length,r=[];++t<e;)r[t]=0;return r}function bi(n){for(var t,e=1,r=0,i=n[0][1],u=n.length;e<u;++e)(t=n[e][1])>i&&(r=e,i=t);return r}function _i(n){return n.reduce(wi,0)}function wi(n,t){return n+t[1]}function ki(n,t){return Si(n,Math.ceil(Math.log(t.length)/Math.LN2+1))}function Si(n,t){for(var e=-1,r=+n[0],i=(n[1]-r)/t,u=[];++e<=t;)u[e]=i*e+r;return u}function Ni(n){return[ho.min(n),ho.max(n)]}function Ei(n,t){return n.value-t.value}function Ai(n,t){var e=n._pack_next;n._pack_next=t,t._pack_prev=n,t._pack_next=e,e._pack_prev=t}function zi(n,t){n._pack_next=t,t._pack_prev=n}function Ci(n,t){var e=t.x-n.x,r=t.y-n.y,i=n.r+t.r;return.999*i*i>e*e+r*r}function Li(n){function t(n){f=Math.min(n.x-n.r,f),s=Math.max(n.x+n.r,s),h=Math.min(n.y-n.r,h),p=Math.max(n.y+n.r,p)}if((e=n.children)&&(c=e.length)){var e,r,i,u,o,a,l,c,f=1/0,s=-(1/0),h=1/0,p=-(1/0);if(e.forEach(qi),r=e[0],r.x=-r.r,r.y=0,t(r),c>1&&(i=e[1],i.x=i.r,i.y=0,t(i),c>2))for(u=e[2],Ri(r,i,u),t(u),Ai(r,u),r._pack_prev=u,Ai(u,i),i=r._pack_next,o=3;o<c;o++){Ri(r,i,u=e[o]);var g=0,d=1,v=1;for(a=i._pack_next;a!==i;a=a._pack_next,d++)if(Ci(a,u)){g=1;break}if(1==g)for(l=r._pack_prev;l!==a._pack_prev&&!Ci(l,u);l=l._pack_prev,v++);g?(d<v||d==v&&i.r<r.r?zi(r,i=a):zi(r=l,i),o--):(Ai(r,u),i=u,t(u))}var y=(f+s)/2,m=(h+p)/2,x=0;for(o=0;o<c;o++)u=e[o],u.x-=y,u.y-=m,x=Math.max(x,u.r+Math.sqrt(u.x*u.x+u.y*u.y));n.r=x,e.forEach(Ti)}}function qi(n){n._pack_next=n._pack_prev=n}function Ti(n){delete n._pack_next,delete n._pack_prev}function Pi(n,t,e,r){var i=n.children;if(n.x=t+=r*n.x,n.y=e+=r*n.y,n.r*=r,i)for(var u=-1,o=i.length;++u<o;)Pi(i[u],t,e,r)}function Ri(n,t,e){var r=n.r+e.r,i=t.x-n.x,u=t.y-n.y;if(r&&(i||u)){var o=t.r+e.r,a=i*i+u*u;o*=o,r*=r;var l=.5+(r-o)/(2*a),c=Math.sqrt(Math.max(0,2*o*(r+a)-(r-=a)*r-o*o))/(2*a);e.x=n.x+l*i+c*u,e.y=n.y+l*u-c*i}else e.x=n.x+r,e.y=n.y}function Di(n,t){return n.parent==t.parent?1:2}function Ui(n){var t=n.children;return t.length?t[0]:n.t}function ji(n){var t,e=n.children;return(t=e.length)?e[t-1]:n.t}function Fi(n,t,e){var r=e/(t.i-n.i);t.c-=r,t.s+=e,n.c+=r,t.z+=e,t.m+=e}function Hi(n){for(var t,e=0,r=0,i=n.children,u=i.length;--u>=0;)t=i[u],t.z+=e,t.m+=e,e+=t.s+(r+=t.c)}function Oi(n,t,e){return n.a.parent===t.parent?n.a:e}function Ii(n){return 1+ho.max(n,function(n){return n.y})}function Yi(n){return n.reduce(function(n,t){return n+t.x},0)/n.length}function Zi(n){var t=n.children;return t&&t.length?Zi(t[0]):n}function Vi(n){var t,e=n.children;return e&&(t=e.length)?Vi(e[t-1]):n}function Bi(n){return{x:n.x,y:n.y,dx:n.dx,dy:n.dy}}function Xi(n,t){var e=n.x+t[3],r=n.y+t[0],i=n.dx-t[1]-t[3],u=n.dy-t[0]-t[2];return i<0&&(e+=i/2,i=0),u<0&&(r+=u/2,u=0),{x:e,y:r,dx:i,dy:u}}function $i(n){var t=n[0],e=n[n.length-1];return t<e?[t,e]:[e,t]}function Wi(n){return n.rangeExtent?n.rangeExtent():$i(n.range())}function Ji(n,t,e,r){var i=e(n[0],n[1]),u=r(t[0],t[1]);return function(n){return u(i(n))}}function Gi(n,t){var e,r=0,i=n.length-1,u=n[r],o=n[i];return o<u&&(e=r,r=i,i=e,e=u,u=o,o=e),n[r]=t.floor(u),n[i]=t.ceil(o),n}function Ki(n){return n?{floor:function(t){return Math.floor(t/n)*n},ceil:function(t){return Math.ceil(t/n)*n}}:El}function Qi(n,t,e,r){var i=[],u=[],o=0,a=Math.min(n.length,t.length)-1;for(n[a]<n[0]&&(n=n.slice().reverse(),t=t.slice().reverse());++o<=a;)i.push(e(n[o-1],n[o])),u.push(r(t[o-1],t[o]));return function(t){var e=ho.bisect(n,t,1,a)-1;return u[e](i[e](t))}}function nu(n,t,e,r){function i(){var i=Math.min(n.length,t.length)>2?Qi:Ji,l=r?ni:Qr;return o=i(n,t,l,e),a=i(t,n,l,kr),u}function u(n){return o(n)}var o,a;return u.invert=function(n){return a(n)},u.domain=function(t){return arguments.length?(n=t.map(Number),i()):n},u.range=function(n){return arguments.length?(t=n,i()):t},u.rangeRound=function(n){return u.range(n).interpolate(Ir)},u.clamp=function(n){return arguments.length?(r=n,i()):r},u.interpolate=function(n){return arguments.length?(e=n,i()):e},u.ticks=function(t){return iu(n,t)},u.tickFormat=function(t,e){return uu(n,t,e)},u.nice=function(t){return eu(n,t),i()},u.copy=function(){return nu(n,t,e,r)},i()}function tu(n,t){return ho.rebind(n,t,"range","rangeRound","interpolate","clamp")}function eu(n,t){return Gi(n,Ki(ru(n,t)[2])),Gi(n,Ki(ru(n,t)[2])),n}function ru(n,t){null==t&&(t=10);var e=$i(n),r=e[1]-e[0],i=Math.pow(10,Math.floor(Math.log(r/t)/Math.LN10)),u=t/r*i;return u<=.15?i*=10:u<=.35?i*=5:u<=.75&&(i*=2),e[0]=Math.ceil(e[0]/i)*i,e[1]=Math.floor(e[1]/i)*i+.5*i,e[2]=i,e}function iu(n,t){return ho.range.apply(ho,ru(n,t))}function uu(n,t,e){var r=ru(n,t);if(e){var i=da.exec(e);if(i.shift(),"s"===i[8]){var u=ho.formatPrefix(Math.max(wo(r[0]),wo(r[1])));return i[7]||(i[7]="."+ou(u.scale(r[2]))),i[8]="f",e=ho.format(i.join("")),function(n){return e(u.scale(n))+u.symbol}}i[7]||(i[7]="."+au(i[8],r)),e=i.join("")}else e=",."+ou(r[2])+"f";return ho.format(e)}function ou(n){return-Math.floor(Math.log(n)/Math.LN10+.01)}function au(n,t){var e=ou(t[2]);return n in Al?Math.abs(e-ou(Math.max(wo(t[0]),wo(t[1]))))+ +("e"!==n):e-2*("%"===n)}function lu(n,t,e,r){function i(n){return(e?Math.log(n<0?0:n):-Math.log(n>0?0:-n))/Math.log(t)}function u(n){return e?Math.pow(t,n):-Math.pow(t,-n)}function o(t){return n(i(t))}return o.invert=function(t){return u(n.invert(t))},o.domain=function(t){return arguments.length?(e=t[0]>=0,n.domain((r=t.map(Number)).map(i)),o):r},o.base=function(e){return arguments.length?(t=+e,n.domain(r.map(i)),o):t},o.nice=function(){var t=Gi(r.map(i),e?Math:Cl);return n.domain(t),r=t.map(u),o},o.ticks=function(){var n=$i(r),o=[],a=n[0],l=n[1],c=Math.floor(i(a)),f=Math.ceil(i(l)),s=t%1?2:t;if(isFinite(f-c)){if(e){for(;c<f;c++)for(var h=1;h<s;h++)o.push(u(c)*h);o.push(u(c))}else for(o.push(u(c));c++<f;)for(var h=s-1;h>0;h--)o.push(u(c)*h);for(c=0;o[c]<a;c++);for(f=o.length;o[f-1]>l;f--);o=o.slice(c,f)}return o},o.tickFormat=function(n,e){if(!arguments.length)return zl;arguments.length<2?e=zl:"function"!=typeof e&&(e=ho.format(e));var r=Math.max(1,t*n/o.ticks().length);return function(n){var o=n/u(Math.round(i(n)));return o*t<t-.5&&(o*=t),o<=r?e(n):""}},o.copy=function(){return lu(n.copy(),t,e,r)},tu(o,n)}function cu(n,t,e){function r(t){return n(i(t))}var i=fu(t),u=fu(1/t);return r.invert=function(t){return u(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain((e=t.map(Number)).map(i)),r):e},r.ticks=function(n){return iu(e,n)},r.tickFormat=function(n,t){return uu(e,n,t)},r.nice=function(n){return r.domain(eu(e,n))},r.exponent=function(o){return arguments.length?(i=fu(t=o),u=fu(1/t),n.domain(e.map(i)),r):t},r.copy=function(){return cu(n.copy(),t,e)},tu(r,n)}function fu(n){return function(t){return t<0?-Math.pow(-t,n):Math.pow(t,n)}}function su(n,t){function e(e){return u[((i.get(e)||("range"===t.t?i.set(e,n.push(e)):NaN))-1)%u.length]}function r(t,e){return ho.range(n.length).map(function(n){return t+e*n})}var i,u,o;return e.domain=function(r){if(!arguments.length)return n;n=[],i=new g;for(var u,o=-1,a=r.length;++o<a;)i.has(u=r[o])||i.set(u,n.push(u));return e[t.t].apply(e,t.a)},e.range=function(n){return arguments.length?(u=n,o=0,t={t:"range",a:arguments},e):u},e.rangePoints=function(i,a){arguments.length<2&&(a=0);var l=i[0],c=i[1],f=n.length<2?(l=(l+c)/2,0):(c-l)/(n.length-1+a);return u=r(l+f*a/2,f),o=0,t={t:"rangePoints",a:arguments},e},e.rangeRoundPoints=function(i,a){arguments.length<2&&(a=0);var l=i[0],c=i[1],f=n.length<2?(l=c=Math.round((l+c)/2),0):(c-l)/(n.length-1+a)|0;return u=r(l+Math.round(f*a/2+(c-l-(n.length-1+a)*f)/2),f),o=0,t={t:"rangeRoundPoints",a:arguments},e},e.rangeBands=function(i,a,l){arguments.length<2&&(a=0),arguments.length<3&&(l=a);var c=i[1]<i[0],f=i[c-0],s=i[1-c],h=(s-f)/(n.length-a+2*l);return u=r(f+h*l,h),c&&u.reverse(),o=h*(1-a),t={t:"rangeBands",a:arguments},e},e.rangeRoundBands=function(i,a,l){arguments.length<2&&(a=0),arguments.length<3&&(l=a);var c=i[1]<i[0],f=i[c-0],s=i[1-c],h=Math.floor((s-f)/(n.length-a+2*l));return u=r(f+Math.round((s-f-(n.length-a)*h)/2),h),c&&u.reverse(),o=Math.round(h*(1-a)),t={t:"rangeRoundBands",a:arguments},e},e.rangeBand=function(){return o},e.rangeExtent=function(){return $i(t.a[0])},e.copy=function(){return su(n,t)},e.domain(n)}function hu(n,t){function e(){var e=0,u=t.length;for(i=[];++e<u;)i[e-1]=ho.quantile(n,e/u);return r}function r(n){if(!isNaN(n=+n))return t[ho.bisect(i,n)]}var i;return r.domain=function(t){return arguments.length?(n=t.map(l).filter(c).sort(a),e()):n},r.range=function(n){return arguments.length?(t=n,e()):t},r.quantiles=function(){return i},r.invertExtent=function(e){return e=t.indexOf(e),e<0?[NaN,NaN]:[e>0?i[e-1]:n[0],e<i.length?i[e]:n[n.length-1]]},r.copy=function(){return hu(n,t)},e()}function pu(n,t,e){function r(t){return e[Math.max(0,Math.min(o,Math.floor(u*(t-n))))]}function i(){return u=e.length/(t-n),o=e.length-1,r}var u,o;return r.domain=function(e){return arguments.length?(n=+e[0],t=+e[e.length-1],i()):[n,t]},r.range=function(n){return arguments.length?(e=n,i()):e},r.invertExtent=function(t){return t=e.indexOf(t),t=t<0?NaN:t/u+n,[t,t+1/u]},r.copy=function(){return pu(n,t,e)},i()}function gu(n,t){function e(e){if(e<=e)return t[ho.bisect(n,e)]}return e.domain=function(t){return arguments.length?(n=t,e):n},e.range=function(n){return arguments.length?(t=n,e):t},e.invertExtent=function(e){return e=t.indexOf(e),[n[e-1],n[e]]},e.copy=function(){return gu(n,t)},e}function du(n){function t(n){return+n}return t.invert=t,t.domain=t.range=function(e){return arguments.length?(n=e.map(t),t):n},t.ticks=function(t){return iu(n,t)},t.tickFormat=function(t,e){return uu(n,t,e)},t.copy=function(){return du(n)},t}function vu(){return 0}function yu(n){return n.innerRadius}function mu(n){return n.outerRadius}function xu(n){return n.startAngle}function Mu(n){return n.endAngle}function bu(n){return n&&n.padAngle}function _u(n,t,e,r){return(n-e)*t-(t-r)*n>0?0:1}function wu(n,t,e,r,i){var u=n[0]-t[0],o=n[1]-t[1],a=(i?r:-r)/Math.sqrt(u*u+o*o),l=a*o,c=-a*u,f=n[0]+l,s=n[1]+c,h=t[0]+l,p=t[1]+c,g=(f+h)/2,d=(s+p)/2,v=h-f,y=p-s,m=v*v+y*y,x=e-r,M=f*p-h*s,b=(y<0?-1:1)*Math.sqrt(Math.max(0,x*x*m-M*M)),_=(M*y-v*b)/m,w=(-M*v-y*b)/m,k=(M*y+v*b)/m,S=(-M*v+y*b)/m,N=_-g,E=w-d,A=k-g,z=S-d;return N*N+E*E>A*A+z*z&&(_=k,w=S),[[_-l,w-c],[_*e/x,w*e/x]]}function ku(n){function t(t){function o(){c.push("M",u(n(f),a))}for(var l,c=[],f=[],s=-1,h=t.length,p=qn(e),g=qn(r);++s<h;)i.call(this,l=t[s],s)?f.push([+p.call(this,l,s),+g.call(this,l,s)]):f.length&&(o(),f=[]);return f.length&&o(),c.length?c.join(""):null}var e=Pe,r=Re,i=Rt,u=Su,o=u.key,a=.7;return t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,
t):r},t.defined=function(n){return arguments.length?(i=n,t):i},t.interpolate=function(n){return arguments.length?(o="function"==typeof n?u=n:(u=Dl.get(n)||Su).key,t):o},t.tension=function(n){return arguments.length?(a=n,t):a},t}function Su(n){return n.length>1?n.join("L"):n+"Z"}function Nu(n){return n.join("L")+"Z"}function Eu(n){for(var t=0,e=n.length,r=n[0],i=[r[0],",",r[1]];++t<e;)i.push("H",(r[0]+(r=n[t])[0])/2,"V",r[1]);return e>1&&i.push("H",r[0]),i.join("")}function Au(n){for(var t=0,e=n.length,r=n[0],i=[r[0],",",r[1]];++t<e;)i.push("V",(r=n[t])[1],"H",r[0]);return i.join("")}function zu(n){for(var t=0,e=n.length,r=n[0],i=[r[0],",",r[1]];++t<e;)i.push("H",(r=n[t])[0],"V",r[1]);return i.join("")}function Cu(n,t){return n.length<4?Su(n):n[1]+Tu(n.slice(1,-1),Pu(n,t))}function Lu(n,t){return n.length<3?Nu(n):n[0]+Tu((n.push(n[0]),n),Pu([n[n.length-2]].concat(n,[n[1]]),t))}function qu(n,t){return n.length<3?Su(n):n[0]+Tu(n,Pu(n,t))}function Tu(n,t){if(t.length<1||n.length!=t.length&&n.length!=t.length+2)return Su(n);var e=n.length!=t.length,r="",i=n[0],u=n[1],o=t[0],a=o,l=1;if(e&&(r+="Q"+(u[0]-2*o[0]/3)+","+(u[1]-2*o[1]/3)+","+u[0]+","+u[1],i=n[1],l=2),t.length>1){a=t[1],u=n[l],l++,r+="C"+(i[0]+o[0])+","+(i[1]+o[1])+","+(u[0]-a[0])+","+(u[1]-a[1])+","+u[0]+","+u[1];for(var c=2;c<t.length;c++,l++)u=n[l],a=t[c],r+="S"+(u[0]-a[0])+","+(u[1]-a[1])+","+u[0]+","+u[1]}if(e){var f=n[l];r+="Q"+(u[0]+2*a[0]/3)+","+(u[1]+2*a[1]/3)+","+f[0]+","+f[1]}return r}function Pu(n,t){for(var e,r=[],i=(1-t)/2,u=n[0],o=n[1],a=1,l=n.length;++a<l;)e=u,u=o,o=n[a],r.push([i*(o[0]-e[0]),i*(o[1]-e[1])]);return r}function Ru(n){if(n.length<3)return Su(n);var t=1,e=n.length,r=n[0],i=r[0],u=r[1],o=[i,i,i,(r=n[1])[0]],a=[u,u,u,r[1]],l=[i,",",u,"L",Fu(Fl,o),",",Fu(Fl,a)];for(n.push(n[e-1]);++t<=e;)r=n[t],o.shift(),o.push(r[0]),a.shift(),a.push(r[1]),Hu(l,o,a);return n.pop(),l.push("L",r),l.join("")}function Du(n){if(n.length<4)return Su(n);for(var t,e=[],r=-1,i=n.length,u=[0],o=[0];++r<3;)t=n[r],u.push(t[0]),o.push(t[1]);for(e.push(Fu(Fl,u)+","+Fu(Fl,o)),--r;++r<i;)t=n[r],u.shift(),u.push(t[0]),o.shift(),o.push(t[1]),Hu(e,u,o);return e.join("")}function Uu(n){for(var t,e,r=-1,i=n.length,u=i+4,o=[],a=[];++r<4;)e=n[r%i],o.push(e[0]),a.push(e[1]);for(t=[Fu(Fl,o),",",Fu(Fl,a)],--r;++r<u;)e=n[r%i],o.shift(),o.push(e[0]),a.shift(),a.push(e[1]),Hu(t,o,a);return t.join("")}function ju(n,t){var e=n.length-1;if(e)for(var r,i,u=n[0][0],o=n[0][1],a=n[e][0]-u,l=n[e][1]-o,c=-1;++c<=e;)r=n[c],i=c/e,r[0]=t*r[0]+(1-t)*(u+i*a),r[1]=t*r[1]+(1-t)*(o+i*l);return Ru(n)}function Fu(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]+n[3]*t[3]}function Hu(n,t,e){n.push("C",Fu(Ul,t),",",Fu(Ul,e),",",Fu(jl,t),",",Fu(jl,e),",",Fu(Fl,t),",",Fu(Fl,e))}function Ou(n,t){return(t[1]-n[1])/(t[0]-n[0])}function Iu(n){for(var t=0,e=n.length-1,r=[],i=n[0],u=n[1],o=r[0]=Ou(i,u);++t<e;)r[t]=(o+(o=Ou(i=u,u=n[t+1])))/2;return r[t]=o,r}function Yu(n){for(var t,e,r,i,u=[],o=Iu(n),a=-1,l=n.length-1;++a<l;)t=Ou(n[a],n[a+1]),wo(t)<Ho?o[a]=o[a+1]=0:(e=o[a]/t,r=o[a+1]/t,i=e*e+r*r,i>9&&(i=3*t/Math.sqrt(i),o[a]=i*e,o[a+1]=i*r));for(a=-1;++a<=l;)i=(n[Math.min(l,a+1)][0]-n[Math.max(0,a-1)][0])/(6*(1+o[a]*o[a])),u.push([i||0,o[a]*i||0]);return u}function Zu(n){return n.length<3?Su(n):n[0]+Tu(n,Yu(n))}function Vu(n){for(var t,e,r,i=-1,u=n.length;++i<u;)t=n[i],e=t[0],r=t[1]-Vo,t[0]=e*Math.cos(r),t[1]=e*Math.sin(r);return n}function Bu(n){function t(t){function l(){d.push("M",a(n(y),s),f,c(n(v.reverse()),s),"Z")}for(var h,p,g,d=[],v=[],y=[],m=-1,x=t.length,M=qn(e),b=qn(i),_=e===r?function(){return p}:qn(r),w=i===u?function(){return g}:qn(u);++m<x;)o.call(this,h=t[m],m)?(v.push([p=+M.call(this,h,m),g=+b.call(this,h,m)]),y.push([+_.call(this,h,m),+w.call(this,h,m)])):v.length&&(l(),v=[],y=[]);return v.length&&l(),d.length?d.join(""):null}var e=Pe,r=Pe,i=0,u=Re,o=Rt,a=Su,l=a.key,c=a,f="L",s=.7;return t.x=function(n){return arguments.length?(e=r=n,t):r},t.x0=function(n){return arguments.length?(e=n,t):e},t.x1=function(n){return arguments.length?(r=n,t):r},t.y=function(n){return arguments.length?(i=u=n,t):u},t.y0=function(n){return arguments.length?(i=n,t):i},t.y1=function(n){return arguments.length?(u=n,t):u},t.defined=function(n){return arguments.length?(o=n,t):o},t.interpolate=function(n){return arguments.length?(l="function"==typeof n?a=n:(a=Dl.get(n)||Su).key,c=a.reverse||a,f=a.closed?"M":"L",t):l},t.tension=function(n){return arguments.length?(s=n,t):s},t}function Xu(n){return n.radius}function $u(n){return[n.x,n.y]}function Wu(n){return function(){var t=n.apply(this,arguments),e=t[0],r=t[1]-Vo;return[e*Math.cos(r),e*Math.sin(r)]}}function Ju(){return 64}function Gu(){return"circle"}function Ku(n){var t=Math.sqrt(n/Io);return"M0,"+t+"A"+t+","+t+" 0 1,1 0,"+-t+"A"+t+","+t+" 0 1,1 0,"+t+"Z"}function Qu(n){return function(){var t,e,r;(t=this[n])&&(r=t[e=t.active])&&(r.timer.c=null,r.timer.t=NaN,--t.count?delete t[e]:delete this[n],t.active+=.5,r.event&&r.event.interrupt.call(this,this.__data__,r.index))}}function no(n,t,e){return Ao(n,Bl),n.namespace=t,n.id=e,n}function to(n,t,e,r){var i=n.id,u=n.namespace;return $(n,"function"==typeof e?function(n,o,a){n[u][i].tween.set(t,r(e.call(n,n.__data__,o,a)))}:(e=r(e),function(n){n[u][i].tween.set(t,e)}))}function eo(n){return null==n&&(n=""),function(){this.textContent=n}}function ro(n){return null==n?"__transition__":"__transition_"+n+"__"}function io(n,t,e,r,i){function u(n){var t=d.delay;return c.t=t+l,t<=n?o(n-t):void(c.c=o)}function o(e){var i=p.active,u=p[i];u&&(u.timer.c=null,u.timer.t=NaN,--p.count,delete p[i],u.event&&u.event.interrupt.call(n,n.__data__,u.index));for(var o in p)if(+o<r){var g=p[o];g.timer.c=null,g.timer.t=NaN,--p.count,delete p[o]}c.c=a,Un(function(){return c.c&&a(e||1)&&(c.c=null,c.t=NaN),1},0,l),p.active=r,d.event&&d.event.start.call(n,n.__data__,t),h=[],d.tween.forEach(function(e,r){(r=r.call(n,n.__data__,t))&&h.push(r)}),s=d.ease,f=d.duration}function a(i){for(var u=i/f,o=s(u),a=h.length;a>0;)h[--a].call(n,o);if(u>=1)return d.event&&d.event.end.call(n,n.__data__,t),--p.count?delete p[r]:delete n[e],1}var l,c,f,s,h,p=n[e]||(n[e]={active:0,count:0}),d=p[r];d||(l=i.time,c=Un(u,0,l),d=p[r]={tween:new g,time:l,timer:c,delay:i.delay,duration:i.duration,ease:i.ease,index:t},i=null,++p.count)}function uo(n,t,e){n.attr("transform",function(n){var r=t(n);return"translate("+(isFinite(r)?r:e(n))+",0)"})}function oo(n,t,e){n.attr("transform",function(n){var r=t(n);return"translate(0,"+(isFinite(r)?r:e(n))+")"})}function ao(n){return n.toISOString()}function lo(n,t,e){function r(t){return n(t)}function i(n,e){var r=n[1]-n[0],i=r/e,u=ho.bisect(tc,i);return u==tc.length?[t.year,ru(n.map(function(n){return n/31536e6}),e)[2]]:u?t[i/tc[u-1]<tc[u]/i?u-1:u]:[ic,ru(n,e)[2]]}return r.invert=function(t){return co(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain(t),r):n.domain().map(co)},r.nice=function(n,t){function e(e){return!isNaN(e)&&!n.range(e,co(+e+1),t).length}var u=r.domain(),o=$i(u),a=null==n?i(o,10):"number"==typeof n&&i(o,n);return a&&(n=a[0],t=a[1]),r.domain(Gi(u,t>1?{floor:function(t){for(;e(t=n.floor(t));)t=co(t-1);return t},ceil:function(t){for(;e(t=n.ceil(t));)t=co(+t+1);return t}}:n))},r.ticks=function(n,t){var e=$i(r.domain()),u=null==n?i(e,10):"number"==typeof n?i(e,n):!n.range&&[{range:n},t];return u&&(n=u[0],t=u[1]),n.range(e[0],co(+e[1]+1),t<1?1:t)},r.tickFormat=function(){return e},r.copy=function(){return lo(n.copy(),t,e)},tu(r,n)}function co(n){return new Date(n)}function fo(n){return JSON.parse(n.responseText)}function so(n){var t=vo.createRange();return t.selectNode(vo.body),t.createContextualFragment(n.responseText)}var ho={version:"3.5.17"},po=[].slice,go=function(n){return po.call(n)},vo=this.document;if(vo)try{go(vo.documentElement.childNodes)[0].nodeType}catch(n){go=function(n){for(var t=n.length,e=new Array(t);t--;)e[t]=n[t];return e}}if(Date.now||(Date.now=function(){return+new Date}),vo)try{vo.createElement("DIV").style.setProperty("opacity",0,"")}catch(n){var yo=this.Element.prototype,mo=yo.setAttribute,xo=yo.setAttributeNS,Mo=this.CSSStyleDeclaration.prototype,bo=Mo.setProperty;yo.setAttribute=function(n,t){mo.call(this,n,t+"")},yo.setAttributeNS=function(n,t,e){xo.call(this,n,t,e+"")},Mo.setProperty=function(n,t,e){bo.call(this,n,t+"",e)}}ho.ascending=a,ho.descending=function(n,t){return t<n?-1:t>n?1:t>=n?0:NaN},ho.min=function(n,t){var e,r,i=-1,u=n.length;if(1===arguments.length){for(;++i<u;)if(null!=(r=n[i])&&r>=r){e=r;break}for(;++i<u;)null!=(r=n[i])&&e>r&&(e=r)}else{for(;++i<u;)if(null!=(r=t.call(n,n[i],i))&&r>=r){e=r;break}for(;++i<u;)null!=(r=t.call(n,n[i],i))&&e>r&&(e=r)}return e},ho.max=function(n,t){var e,r,i=-1,u=n.length;if(1===arguments.length){for(;++i<u;)if(null!=(r=n[i])&&r>=r){e=r;break}for(;++i<u;)null!=(r=n[i])&&r>e&&(e=r)}else{for(;++i<u;)if(null!=(r=t.call(n,n[i],i))&&r>=r){e=r;break}for(;++i<u;)null!=(r=t.call(n,n[i],i))&&r>e&&(e=r)}return e},ho.extent=function(n,t){var e,r,i,u=-1,o=n.length;if(1===arguments.length){for(;++u<o;)if(null!=(r=n[u])&&r>=r){e=i=r;break}for(;++u<o;)null!=(r=n[u])&&(e>r&&(e=r),i<r&&(i=r))}else{for(;++u<o;)if(null!=(r=t.call(n,n[u],u))&&r>=r){e=i=r;break}for(;++u<o;)null!=(r=t.call(n,n[u],u))&&(e>r&&(e=r),i<r&&(i=r))}return[e,i]},ho.sum=function(n,t){var e,r=0,i=n.length,u=-1;if(1===arguments.length)for(;++u<i;)c(e=+n[u])&&(r+=e);else for(;++u<i;)c(e=+t.call(n,n[u],u))&&(r+=e);return r},ho.mean=function(n,t){var e,r=0,i=n.length,u=-1,o=i;if(1===arguments.length)for(;++u<i;)c(e=l(n[u]))?r+=e:--o;else for(;++u<i;)c(e=l(t.call(n,n[u],u)))?r+=e:--o;if(o)return r/o},ho.quantile=function(n,t){var e=(n.length-1)*t+1,r=Math.floor(e),i=+n[r-1],u=e-r;return u?i+u*(n[r]-i):i},ho.median=function(n,t){var e,r=[],i=n.length,u=-1;if(1===arguments.length)for(;++u<i;)c(e=l(n[u]))&&r.push(e);else for(;++u<i;)c(e=l(t.call(n,n[u],u)))&&r.push(e);if(r.length)return ho.quantile(r.sort(a),.5)},ho.variance=function(n,t){var e,r,i=n.length,u=0,o=0,a=-1,f=0;if(1===arguments.length)for(;++a<i;)c(e=l(n[a]))&&(r=e-u,u+=r/++f,o+=r*(e-u));else for(;++a<i;)c(e=l(t.call(n,n[a],a)))&&(r=e-u,u+=r/++f,o+=r*(e-u));if(f>1)return o/(f-1)},ho.deviation=function(){var n=ho.variance.apply(this,arguments);return n?Math.sqrt(n):n};var _o=f(a);ho.bisectLeft=_o.left,ho.bisect=ho.bisectRight=_o.right,ho.bisector=function(n){return f(1===n.length?function(t,e){return a(n(t),e)}:n)},ho.shuffle=function(n,t,e){(u=arguments.length)<3&&(e=n.length,u<2&&(t=0));for(var r,i,u=e-t;u;)i=Math.random()*u--|0,r=n[u+t],n[u+t]=n[i+t],n[i+t]=r;return n},ho.permute=function(n,t){for(var e=t.length,r=new Array(e);e--;)r[e]=n[t[e]];return r},ho.pairs=function(n){for(var t,e=0,r=n.length-1,i=n[0],u=new Array(r<0?0:r);e<r;)u[e]=[t=i,i=n[++e]];return u},ho.transpose=function(n){if(!(i=n.length))return[];for(var t=-1,e=ho.min(n,s),r=new Array(e);++t<e;)for(var i,u=-1,o=r[t]=new Array(i);++u<i;)o[u]=n[u][t];return r},ho.zip=function(){return ho.transpose(arguments)},ho.keys=function(n){var t=[];for(var e in n)t.push(e);return t},ho.values=function(n){var t=[];for(var e in n)t.push(n[e]);return t},ho.entries=function(n){var t=[];for(var e in n)t.push({key:e,value:n[e]});return t},ho.merge=function(n){for(var t,e,r,i=n.length,u=-1,o=0;++u<i;)o+=n[u].length;for(e=new Array(o);--i>=0;)for(r=n[i],t=r.length;--t>=0;)e[--o]=r[t];return e};var wo=Math.abs;ho.range=function(n,t,e){if(arguments.length<3&&(e=1,arguments.length<2&&(t=n,n=0)),(t-n)/e===1/0)throw new Error("infinite range");var r,i=[],u=h(wo(e)),o=-1;if(n*=u,t*=u,e*=u,e<0)for(;(r=n+e*++o)>t;)i.push(r/u);else for(;(r=n+e*++o)<t;)i.push(r/u);return i},ho.map=function(n,t){var e=new g;if(n instanceof g)n.forEach(function(n,t){e.set(n,t)});else if(Array.isArray(n)){var r,i=-1,u=n.length;if(1===arguments.length)for(;++i<u;)e.set(i,n[i]);else for(;++i<u;)e.set(t.call(n,r=n[i],i),r)}else for(var o in n)e.set(o,n[o]);return e};var ko="__proto__",So="\0";p(g,{has:y,get:function(n){return this._[d(n)]},set:function(n,t){return this._[d(n)]=t},remove:m,keys:x,values:function(){var n=[];for(var t in this._)n.push(this._[t]);return n},entries:function(){var n=[];for(var t in this._)n.push({key:v(t),value:this._[t]});return n},size:M,empty:b,forEach:function(n){for(var t in this._)n.call(this,v(t),this._[t])}}),ho.nest=function(){function n(t,o,a){if(a>=u.length)return r?r.call(i,o):e?o.sort(e):o;for(var l,c,f,s,h=-1,p=o.length,d=u[a++],v=new g;++h<p;)(s=v.get(l=d(c=o[h])))?s.push(c):v.set(l,[c]);return t?(c=t(),f=function(e,r){c.set(e,n(t,r,a))}):(c={},f=function(e,r){c[e]=n(t,r,a)}),v.forEach(f),c}function t(n,e){if(e>=u.length)return n;var r=[],i=o[e++];return n.forEach(function(n,i){r.push({key:n,values:t(i,e)})}),i?r.sort(function(n,t){return i(n.key,t.key)}):r}var e,r,i={},u=[],o=[];return i.map=function(t,e){return n(e,t,0)},i.entries=function(e){return t(n(ho.map,e,0),0)},i.key=function(n){return u.push(n),i},i.sortKeys=function(n){return o[u.length-1]=n,i},i.sortValues=function(n){return e=n,i},i.rollup=function(n){return r=n,i},i},ho.set=function(n){var t=new _;if(n)for(var e=0,r=n.length;e<r;++e)t.add(n[e]);return t},p(_,{has:y,add:function(n){return this._[d(n+="")]=!0,n},remove:m,values:x,size:M,empty:b,forEach:function(n){for(var t in this._)n.call(this,v(t))}}),ho.behavior={},ho.rebind=function(n,t){for(var e,r=1,i=arguments.length;++r<i;)n[e=arguments[r]]=k(n,t,t[e]);return n};var No=["webkit","ms","moz","Moz","o","O"];ho.dispatch=function(){for(var n=new E,t=-1,e=arguments.length;++t<e;)n[arguments[t]]=A(n);return n},E.prototype.on=function(n,t){var e=n.indexOf("."),r="";if(e>=0&&(r=n.slice(e+1),n=n.slice(0,e)),n)return arguments.length<2?this[n].on(r):this[n].on(r,t);if(2===arguments.length){if(null==t)for(n in this)this.hasOwnProperty(n)&&this[n].on(r,null);return this}},ho.event=null,ho.requote=function(n){return n.replace(Eo,"\\$&")};var Eo=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,Ao={}.__proto__?function(n,t){n.__proto__=t}:function(n,t){for(var e in t)n[e]=t[e]},zo=function(n,t){return t.querySelector(n)},Co=function(n,t){return t.querySelectorAll(n)},Lo=function(n,t){var e=n.matches||n[S(n,"matchesSelector")];return(Lo=function(n,t){return e.call(n,t)})(n,t)};"function"==typeof Sizzle&&(zo=function(n,t){return Sizzle(n,t)[0]||null},Co=Sizzle,Lo=Sizzle.matchesSelector),ho.selection=function(){return ho.select(vo.documentElement)};var qo=ho.selection.prototype=[];qo.select=function(n){var t,e,r,i,u=[];n=T(n);for(var o=-1,a=this.length;++o<a;){u.push(t=[]),t.parentNode=(r=this[o]).parentNode;for(var l=-1,c=r.length;++l<c;)(i=r[l])?(t.push(e=n.call(i,i.__data__,l,o)),e&&"__data__"in i&&(e.__data__=i.__data__)):t.push(null)}return q(u)},qo.selectAll=function(n){var t,e,r=[];n=P(n);for(var i=-1,u=this.length;++i<u;)for(var o=this[i],a=-1,l=o.length;++a<l;)(e=o[a])&&(r.push(t=go(n.call(e,e.__data__,a,i))),t.parentNode=e);return q(r)};var To="http://www.w3.org/1999/xhtml",Po={svg:"http://www.w3.org/2000/svg",xhtml:To,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};ho.ns={prefix:Po,qualify:function(n){var t=n.indexOf(":"),e=n;return t>=0&&"xmlns"!==(e=n.slice(0,t))&&(n=n.slice(t+1)),Po.hasOwnProperty(e)?{space:Po[e],local:n}:n}},qo.attr=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node();return n=ho.ns.qualify(n),n.local?e.getAttributeNS(n.space,n.local):e.getAttribute(n)}for(t in n)this.each(R(t,n[t]));return this}return this.each(R(n,t))},qo.classed=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node(),r=(n=j(n)).length,i=-1;if(t=e.classList){for(;++i<r;)if(!t.contains(n[i]))return!1}else for(t=e.getAttribute("class");++i<r;)if(!U(n[i]).test(t))return!1;return!0}for(t in n)this.each(F(t,n[t]));return this}return this.each(F(n,t))},qo.style=function(n,t,e){var r=arguments.length;if(r<3){if("string"!=typeof n){r<2&&(t="");for(e in n)this.each(O(e,n[e],t));return this}if(r<2){var i=this.node();return o(i).getComputedStyle(i,null).getPropertyValue(n)}e=""}return this.each(O(n,t,e))},qo.property=function(n,t){if(arguments.length<2){if("string"==typeof n)return this.node()[n];for(t in n)this.each(I(t,n[t]));return this}return this.each(I(n,t))},qo.text=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.textContent=null==t?"":t}:null==n?function(){this.textContent=""}:function(){this.textContent=n}):this.node().textContent},qo.html=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.innerHTML=null==t?"":t}:null==n?function(){this.innerHTML=""}:function(){this.innerHTML=n}):this.node().innerHTML},qo.append=function(n){return n=Y(n),this.select(function(){return this.appendChild(n.apply(this,arguments))})},qo.insert=function(n,t){return n=Y(n),t=T(t),this.select(function(){return this.insertBefore(n.apply(this,arguments),t.apply(this,arguments)||null)})},qo.remove=function(){return this.each(Z)},qo.data=function(n,t){function e(n,e){var r,i,u,o=n.length,f=e.length,s=Math.min(o,f),h=new Array(f),p=new Array(f),d=new Array(o);if(t){var v,y=new g,m=new Array(o);for(r=-1;++r<o;)(i=n[r])&&(y.has(v=t.call(i,i.__data__,r))?d[r]=i:y.set(v,i),m[r]=v);for(r=-1;++r<f;)(i=y.get(v=t.call(e,u=e[r],r)))?i!==!0&&(h[r]=i,i.__data__=u):p[r]=V(u),y.set(v,!0);for(r=-1;++r<o;)r in m&&y.get(m[r])!==!0&&(d[r]=n[r])}else{for(r=-1;++r<s;)i=n[r],u=e[r],i?(i.__data__=u,h[r]=i):p[r]=V(u);for(;r<f;++r)p[r]=V(e[r]);for(;r<o;++r)d[r]=n[r]}p.update=h,p.parentNode=h.parentNode=d.parentNode=n.parentNode,a.push(p),l.push(h),c.push(d)}var r,i,u=-1,o=this.length;if(!arguments.length){for(n=new Array(o=(r=this[0]).length);++u<o;)(i=r[u])&&(n[u]=i.__data__);return n}var a=W([]),l=q([]),c=q([]);if("function"==typeof n)for(;++u<o;)e(r=this[u],n.call(r,r.parentNode.__data__,u));else for(;++u<o;)e(r=this[u],n);return l.enter=function(){return a},l.exit=function(){return c},l},qo.datum=function(n){return arguments.length?this.property("__data__",n):this.property("__data__")},qo.filter=function(n){var t,e,r,i=[];"function"!=typeof n&&(n=B(n));for(var u=0,o=this.length;u<o;u++){i.push(t=[]),t.parentNode=(e=this[u]).parentNode;for(var a=0,l=e.length;a<l;a++)(r=e[a])&&n.call(r,r.__data__,a,u)&&t.push(r)}return q(i)},qo.order=function(){for(var n=-1,t=this.length;++n<t;)for(var e,r=this[n],i=r.length-1,u=r[i];--i>=0;)(e=r[i])&&(u&&u!==e.nextSibling&&u.parentNode.insertBefore(e,u),u=e);return this},qo.sort=function(n){n=X.apply(this,arguments);for(var t=-1,e=this.length;++t<e;)this[t].sort(n);return this.order()},qo.each=function(n){return $(this,function(t,e,r){n.call(t,t.__data__,e,r)})},qo.call=function(n){var t=go(arguments);return n.apply(t[0]=this,t),this},qo.empty=function(){return!this.node()},qo.node=function(){for(var n=0,t=this.length;n<t;n++)for(var e=this[n],r=0,i=e.length;r<i;r++){var u=e[r];if(u)return u}return null},qo.size=function(){var n=0;return $(this,function(){++n}),n};var Ro=[];ho.selection.enter=W,ho.selection.enter.prototype=Ro,Ro.append=qo.append,Ro.empty=qo.empty,Ro.node=qo.node,Ro.call=qo.call,Ro.size=qo.size,Ro.select=function(n){for(var t,e,r,i,u,o=[],a=-1,l=this.length;++a<l;){r=(i=this[a]).update,o.push(t=[]),t.parentNode=i.parentNode;for(var c=-1,f=i.length;++c<f;)(u=i[c])?(t.push(r[c]=e=n.call(i.parentNode,u.__data__,c,a)),e.__data__=u.__data__):t.push(null)}return q(o)},Ro.insert=function(n,t){return arguments.length<2&&(t=J(this)),qo.insert.call(this,n,t)},ho.select=function(n){var t;return"string"==typeof n?(t=[zo(n,vo)],t.parentNode=vo.documentElement):(t=[n],t.parentNode=u(n)),q([t])},ho.selectAll=function(n){var t;return"string"==typeof n?(t=go(Co(n,vo)),t.parentNode=vo.documentElement):(t=go(n),t.parentNode=null),q([t])},qo.on=function(n,t,e){var r=arguments.length;if(r<3){if("string"!=typeof n){r<2&&(t=!1);for(e in n)this.each(G(e,n[e],t));return this}if(r<2)return(r=this.node()["__on"+n])&&r._;e=!1}return this.each(G(n,t,e))};var Do=ho.map({mouseenter:"mouseover",mouseleave:"mouseout"});vo&&Do.forEach(function(n){"on"+n in vo&&Do.remove(n)});var Uo,jo=0;ho.mouse=function(n){return tn(n,C())};var Fo=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;ho.touch=function(n,t,e){if(arguments.length<3&&(e=t,t=C().changedTouches),t)for(var r,i=0,u=t.length;i<u;++i)if((r=t[i]).identifier===e)return tn(n,r)},ho.behavior.drag=function(){function n(){this.on("mousedown.drag",i).on("touchstart.drag",u)}function t(n,t,i,u,o){return function(){function a(){var n,e,r=t(h,d);r&&(n=r[0]-x[0],e=r[1]-x[1],g|=n|e,x=r,p({type:"drag",x:r[0]+c[0],y:r[1]+c[1],dx:n,dy:e}))}function l(){t(h,d)&&(y.on(u+v,null).on(o+v,null),m(g),p({type:"dragend"}))}var c,f=this,s=ho.event.target.correspondingElement||ho.event.target,h=f.parentNode,p=e.of(f,arguments),g=0,d=n(),v=".drag"+(null==d?"":"-"+d),y=ho.select(i(s)).on(u+v,a).on(o+v,l),m=nn(s),x=t(h,d);r?(c=r.apply(f,arguments),c=[c.x-x[0],c.y-x[1]]):c=[0,0],p({type:"dragstart"})}}var e=L(n,"drag","dragstart","dragend"),r=null,i=t(N,ho.mouse,o,"mousemove","mouseup"),u=t(en,ho.touch,w,"touchmove","touchend");return n.origin=function(t){return arguments.length?(r=t,n):r},ho.rebind(n,e,"on")},ho.touches=function(n,t){return arguments.length<2&&(t=C().touches),t?go(t).map(function(t){var e=tn(n,t);return e.identifier=t.identifier,e}):[]};var Ho=1e-6,Oo=Ho*Ho,Io=Math.PI,Yo=2*Io,Zo=Yo-Ho,Vo=Io/2,Bo=Io/180,Xo=180/Io,$o=Math.SQRT2,Wo=2,Jo=4;ho.interpolateZoom=function(n,t){var e,r,i=n[0],u=n[1],o=n[2],a=t[0],l=t[1],c=t[2],f=a-i,s=l-u,h=f*f+s*s;if(h<Oo)r=Math.log(c/o)/$o,e=function(n){return[i+n*f,u+n*s,o*Math.exp($o*n*r)]};else{var p=Math.sqrt(h),g=(c*c-o*o+Jo*h)/(2*o*Wo*p),d=(c*c-o*o-Jo*h)/(2*c*Wo*p),v=Math.log(Math.sqrt(g*g+1)-g),y=Math.log(Math.sqrt(d*d+1)-d);r=(y-v)/$o,e=function(n){var t=n*r,e=cn(v),a=o/(Wo*p)*(e*fn($o*t+v)-ln(v));return[i+a*f,u+a*s,o*e/cn($o*t+v)]}}return e.duration=1e3*r,e},ho.behavior.zoom=function(){function n(n){n.on(C,s).on(Ko+".zoom",p).on("dblclick.zoom",g).on(P,h)}function t(n){return[(n[0]-k.x)/k.k,(n[1]-k.y)/k.k]}function e(n){return[n[0]*k.k+k.x,n[1]*k.k+k.y]}function r(n){k.k=Math.max(N[0],Math.min(N[1],n))}function i(n,t){t=e(t),k.x+=n[0]-t[0],k.y+=n[1]-t[1]}function u(t,e,u,o){t.__chart__={x:k.x,y:k.y,k:k.k},r(Math.pow(2,o)),i(v=e,u),t=ho.select(t),E>0&&(t=t.transition().duration(E)),t.call(n.event)}function a(){b&&b.domain(M.range().map(function(n){return(n-k.x)/k.k}).map(M.invert)),w&&w.domain(_.range().map(function(n){return(n-k.y)/k.k}).map(_.invert))}function l(n){A++||n({type:"zoomstart"})}function c(n){a(),n({type:"zoom",scale:k.k,translate:[k.x,k.y]})}function f(n){--A||(n({type:"zoomend"}),v=null)}function s(){function n(){a=1,i(ho.mouse(r),h),c(u)}function e(){s.on(q,null).on(T,null),p(a),f(u)}var r=this,u=R.of(r,arguments),a=0,s=ho.select(o(r)).on(q,n).on(T,e),h=t(ho.mouse(r)),p=nn(r);Vl.call(r),l(u)}function h(){function n(){var n=ho.touches(g);return p=k.k,n.forEach(function(n){n.identifier in v&&(v[n.identifier]=t(n))}),n}function e(){var t=ho.event.target;ho.select(t).on(M,o).on(b,a),_.push(t);for(var e=ho.event.changedTouches,r=0,i=e.length;r<i;++r)v[e[r].identifier]=null;var l=n(),c=Date.now();if(1===l.length){if(c-x<500){var f=l[0];u(g,f,v[f.identifier],Math.floor(Math.log(k.k)/Math.LN2)+1),z()}x=c}else if(l.length>1){var f=l[0],s=l[1],h=f[0]-s[0],p=f[1]-s[1];y=h*h+p*p}}function o(){var n,t,e,u,o=ho.touches(g);Vl.call(g);for(var a=0,l=o.length;a<l;++a,u=null)if(e=o[a],u=v[e.identifier]){if(t)break;n=e,t=u}if(u){var f=(f=e[0]-n[0])*f+(f=e[1]-n[1])*f,s=y&&Math.sqrt(f/y);n=[(n[0]+e[0])/2,(n[1]+e[1])/2],t=[(t[0]+u[0])/2,(t[1]+u[1])/2],r(s*p)}x=null,i(n,t),c(d)}function a(){if(ho.event.touches.length){for(var t=ho.event.changedTouches,e=0,r=t.length;e<r;++e)delete v[t[e].identifier];for(var i in v)return void n()}ho.selectAll(_).on(m,null),w.on(C,s).on(P,h),S(),f(d)}var p,g=this,d=R.of(g,arguments),v={},y=0,m=".zoom-"+ho.event.changedTouches[0].identifier,M="touchmove"+m,b="touchend"+m,_=[],w=ho.select(g),S=nn(g);e(),l(d),w.on(C,null).on(P,e)}function p(){var n=R.of(this,arguments);m?clearTimeout(m):(Vl.call(this),d=t(v=y||ho.mouse(this)),l(n)),m=setTimeout(function(){m=null,f(n)},50),z(),r(Math.pow(2,.002*Go())*k.k),i(v,d),c(n)}function g(){var n=ho.mouse(this),e=Math.log(k.k)/Math.LN2;u(this,n,t(n),ho.event.shiftKey?Math.ceil(e)-1:Math.floor(e)+1)}var d,v,y,m,x,M,b,_,w,k={x:0,y:0,k:1},S=[960,500],N=Qo,E=250,A=0,C="mousedown.zoom",q="mousemove.zoom",T="mouseup.zoom",P="touchstart.zoom",R=L(n,"zoomstart","zoom","zoomend");return Ko||(Ko="onwheel"in vo?(Go=function(){return-ho.event.deltaY*(ho.event.deltaMode?120:1)},"wheel"):"onmousewheel"in vo?(Go=function(){return ho.event.wheelDelta},"mousewheel"):(Go=function(){return-ho.event.detail},"MozMousePixelScroll")),n.event=function(n){n.each(function(){var n=R.of(this,arguments),t=k;Yl?ho.select(this).transition().each("start.zoom",function(){k=this.__chart__||{x:0,y:0,k:1},l(n)}).tween("zoom:zoom",function(){var e=S[0],r=S[1],i=v?v[0]:e/2,u=v?v[1]:r/2,o=ho.interpolateZoom([(i-k.x)/k.k,(u-k.y)/k.k,e/k.k],[(i-t.x)/t.k,(u-t.y)/t.k,e/t.k]);return function(t){var r=o(t),a=e/r[2];this.__chart__=k={x:i-r[0]*a,y:u-r[1]*a,k:a},c(n)}}).each("interrupt.zoom",function(){f(n)}).each("end.zoom",function(){f(n)}):(this.__chart__=k,l(n),c(n),f(n))})},n.translate=function(t){return arguments.length?(k={x:+t[0],y:+t[1],k:k.k},a(),n):[k.x,k.y]},n.scale=function(t){return arguments.length?(k={x:k.x,y:k.y,k:null},r(+t),a(),n):k.k},n.scaleExtent=function(t){return arguments.length?(N=null==t?Qo:[+t[0],+t[1]],n):N},n.center=function(t){return arguments.length?(y=t&&[+t[0],+t[1]],n):y},n.size=function(t){return arguments.length?(S=t&&[+t[0],+t[1]],n):S},n.duration=function(t){return arguments.length?(E=+t,n):E},n.x=function(t){return arguments.length?(b=t,M=t.copy(),k={x:0,y:0,k:1},n):b},n.y=function(t){return arguments.length?(w=t,_=t.copy(),k={x:0,y:0,k:1},n):w},ho.rebind(n,R,"on")};var Go,Ko,Qo=[0,1/0];ho.color=hn,hn.prototype.toString=function(){return this.rgb()+""},ho.hsl=pn;var na=pn.prototype=new hn;na.brighter=function(n){return n=Math.pow(.7,arguments.length?n:1),new pn(this.h,this.s,this.l/n)},na.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),new pn(this.h,this.s,n*this.l)},na.rgb=function(){return gn(this.h,this.s,this.l)},ho.hcl=dn;var ta=dn.prototype=new hn;ta.brighter=function(n){return new dn(this.h,this.c,Math.min(100,this.l+ea*(arguments.length?n:1)))},ta.darker=function(n){return new dn(this.h,this.c,Math.max(0,this.l-ea*(arguments.length?n:1)))},ta.rgb=function(){return vn(this.h,this.c,this.l).rgb()},ho.lab=yn;var ea=18,ra=.95047,ia=1,ua=1.08883,oa=yn.prototype=new hn;oa.brighter=function(n){return new yn(Math.min(100,this.l+ea*(arguments.length?n:1)),this.a,this.b)},oa.darker=function(n){return new yn(Math.max(0,this.l-ea*(arguments.length?n:1)),this.a,this.b)},oa.rgb=function(){return mn(this.l,this.a,this.b)},ho.rgb=wn;var aa=wn.prototype=new hn;aa.brighter=function(n){n=Math.pow(.7,arguments.length?n:1);var t=this.r,e=this.g,r=this.b,i=30;return t||e||r?(t&&t<i&&(t=i),e&&e<i&&(e=i),r&&r<i&&(r=i),new wn(Math.min(255,t/n),Math.min(255,e/n),Math.min(255,r/n))):new wn(i,i,i)},aa.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),new wn(n*this.r,n*this.g,n*this.b)},aa.hsl=function(){return An(this.r,this.g,this.b)},aa.toString=function(){return"#"+Nn(this.r)+Nn(this.g)+Nn(this.b)};var la=ho.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});la.forEach(function(n,t){la.set(n,kn(t))}),ho.functor=qn,ho.xhr=Tn(w),ho.dsv=function(n,t){function e(n,e,u){arguments.length<3&&(u=e,e=null);var o=Pn(n,t,null==e?r:i(e),u);return o.row=function(n){return arguments.length?o.response(null==(e=n)?r:i(n)):e},o}function r(n){return e.parse(n.responseText)}function i(n){return function(t){return e.parse(t.responseText,n)}}function u(t){return t.map(o).join(n)}function o(n){return a.test(n)?'"'+n.replace(/\"/g,'""')+'"':n}var a=new RegExp('["'+n+"\n]"),l=n.charCodeAt(0);return e.parse=function(n,t){var r;return e.parseRows(n,function(n,e){if(r)return r(n,e-1);var i=new Function("d","return {"+n.map(function(n,t){return JSON.stringify(n)+": d["+t+"]"}).join(",")+"}");r=t?function(n,e){return t(i(n),e)}:i})},e.parseRows=function(n,t){function e(){if(f>=c)return o;if(i)return i=!1,u;var t=f;if(34===n.charCodeAt(t)){for(var e=t;e++<c;)if(34===n.charCodeAt(e)){if(34!==n.charCodeAt(e+1))break;++e}f=e+2;var r=n.charCodeAt(e+1);return 13===r?(i=!0,10===n.charCodeAt(e+2)&&++f):10===r&&(i=!0),n.slice(t+1,e).replace(/""/g,'"')}for(;f<c;){var r=n.charCodeAt(f++),a=1;if(10===r)i=!0;else if(13===r)i=!0,10===n.charCodeAt(f)&&(++f,++a);else if(r!==l)continue;return n.slice(t,f-a)}return n.slice(t)}for(var r,i,u={},o={},a=[],c=n.length,f=0,s=0;(r=e())!==o;){for(var h=[];r!==u&&r!==o;)h.push(r),r=e();t&&null==(h=t(h,s++))||a.push(h)}return a},e.format=function(t){if(Array.isArray(t[0]))return e.formatRows(t);var r=new _,i=[];return t.forEach(function(n){for(var t in n)r.has(t)||i.push(r.add(t))}),[i.map(o).join(n)].concat(t.map(function(t){return i.map(function(n){return o(t[n])}).join(n)})).join("\n")},e.formatRows=function(n){return n.map(u).join("\n")},e},ho.csv=ho.dsv(",","text/csv"),ho.tsv=ho.dsv("\t","text/tab-separated-values");var ca,fa,sa,ha,pa=this[S(this,"requestAnimationFrame")]||function(n){setTimeout(n,17)};ho.timer=function(){
Un.apply(this,arguments)},ho.timer.flush=function(){Fn(),Hn()},ho.round=function(n,t){return t?Math.round(n*(t=Math.pow(10,t)))/t:Math.round(n)};var ga=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"].map(In);ho.formatPrefix=function(n,t){var e=0;return(n=+n)&&(n<0&&(n*=-1),t&&(n=ho.round(n,On(n,t))),e=1+Math.floor(1e-12+Math.log(n)/Math.LN10),e=Math.max(-24,Math.min(24,3*Math.floor((e-1)/3)))),ga[8+e/3]};var da=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,va=ho.map({b:function(n){return n.toString(2)},c:function(n){return String.fromCharCode(n)},o:function(n){return n.toString(8)},x:function(n){return n.toString(16)},X:function(n){return n.toString(16).toUpperCase()},g:function(n,t){return n.toPrecision(t)},e:function(n,t){return n.toExponential(t)},f:function(n,t){return n.toFixed(t)},r:function(n,t){return(n=ho.round(n,On(n,t))).toFixed(Math.max(0,Math.min(20,On(n*(1+1e-15),t))))}}),ya=ho.time={},ma=Date;Vn.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){xa.setUTCDate.apply(this._,arguments)},setDay:function(){xa.setUTCDay.apply(this._,arguments)},setFullYear:function(){xa.setUTCFullYear.apply(this._,arguments)},setHours:function(){xa.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){xa.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){xa.setUTCMinutes.apply(this._,arguments)},setMonth:function(){xa.setUTCMonth.apply(this._,arguments)},setSeconds:function(){xa.setUTCSeconds.apply(this._,arguments)},setTime:function(){xa.setTime.apply(this._,arguments)}};var xa=Date.prototype;ya.year=Bn(function(n){return n=ya.day(n),n.setMonth(0,1),n},function(n,t){n.setFullYear(n.getFullYear()+t)},function(n){return n.getFullYear()}),ya.years=ya.year.range,ya.years.utc=ya.year.utc.range,ya.day=Bn(function(n){var t=new ma(2e3,0);return t.setFullYear(n.getFullYear(),n.getMonth(),n.getDate()),t},function(n,t){n.setDate(n.getDate()+t)},function(n){return n.getDate()-1}),ya.days=ya.day.range,ya.days.utc=ya.day.utc.range,ya.dayOfYear=function(n){var t=ya.year(n);return Math.floor((n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(n,t){t=7-t;var e=ya[n]=Bn(function(n){return(n=ya.day(n)).setDate(n.getDate()-(n.getDay()+t)%7),n},function(n,t){n.setDate(n.getDate()+7*Math.floor(t))},function(n){var e=ya.year(n).getDay();return Math.floor((ya.dayOfYear(n)+(e+t)%7)/7)-(e!==t)});ya[n+"s"]=e.range,ya[n+"s"].utc=e.utc.range,ya[n+"OfYear"]=function(n){var e=ya.year(n).getDay();return Math.floor((ya.dayOfYear(n)+(e+t)%7)/7)}}),ya.week=ya.sunday,ya.weeks=ya.sunday.range,ya.weeks.utc=ya.sunday.utc.range,ya.weekOfYear=ya.sundayOfYear;var Ma={"-":"",_:" ",0:"0"},ba=/^\s*\d+/,_a=/^%/;ho.locale=function(n){return{numberFormat:Yn(n),timeFormat:$n(n)}};var wa=ho.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});ho.format=wa.numberFormat,ho.geo={},dt.prototype={s:0,t:0,add:function(n){vt(n,this.t,ka),vt(ka.s,this.s,this),this.s?this.t+=ka.t:this.s=ka.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var ka=new dt;ho.geo.stream=function(n,t){n&&Sa.hasOwnProperty(n.type)?Sa[n.type](n,t):yt(n,t)};var Sa={Feature:function(n,t){yt(n.geometry,t)},FeatureCollection:function(n,t){for(var e=n.features,r=-1,i=e.length;++r<i;)yt(e[r].geometry,t)}},Na={Sphere:function(n,t){t.sphere()},Point:function(n,t){n=n.coordinates,t.point(n[0],n[1],n[2])},MultiPoint:function(n,t){for(var e=n.coordinates,r=-1,i=e.length;++r<i;)n=e[r],t.point(n[0],n[1],n[2])},LineString:function(n,t){mt(n.coordinates,t,0)},MultiLineString:function(n,t){for(var e=n.coordinates,r=-1,i=e.length;++r<i;)mt(e[r],t,0)},Polygon:function(n,t){xt(n.coordinates,t)},MultiPolygon:function(n,t){for(var e=n.coordinates,r=-1,i=e.length;++r<i;)xt(e[r],t)},GeometryCollection:function(n,t){for(var e=n.geometries,r=-1,i=e.length;++r<i;)yt(e[r],t)}};ho.geo.area=function(n){return Ea=0,ho.geo.stream(n,za),Ea};var Ea,Aa=new dt,za={sphere:function(){Ea+=4*Io},point:N,lineStart:N,lineEnd:N,polygonStart:function(){Aa.reset(),za.lineStart=Mt},polygonEnd:function(){var n=2*Aa;Ea+=n<0?4*Io+n:n,za.lineStart=za.lineEnd=za.point=N}};ho.geo.bounds=function(){function n(n,t){x.push(M=[f=n,h=n]),t<s&&(s=t),t>p&&(p=t)}function t(t,e){var r=bt([t*Bo,e*Bo]);if(y){var i=wt(y,r),u=[i[1],-i[0],0],o=wt(u,i);Nt(o),o=Et(o);var l=t-g,c=l>0?1:-1,d=o[0]*Xo*c,v=wo(l)>180;if(v^(c*g<d&&d<c*t)){var m=o[1]*Xo;m>p&&(p=m)}else if(d=(d+360)%360-180,v^(c*g<d&&d<c*t)){var m=-o[1]*Xo;m<s&&(s=m)}else e<s&&(s=e),e>p&&(p=e);v?t<g?a(f,t)>a(f,h)&&(h=t):a(t,h)>a(f,h)&&(f=t):h>=f?(t<f&&(f=t),t>h&&(h=t)):t>g?a(f,t)>a(f,h)&&(h=t):a(t,h)>a(f,h)&&(f=t)}else n(t,e);y=r,g=t}function e(){b.point=t}function r(){M[0]=f,M[1]=h,b.point=n,y=null}function i(n,e){if(y){var r=n-g;m+=wo(r)>180?r+(r>0?360:-360):r}else d=n,v=e;za.point(n,e),t(n,e)}function u(){za.lineStart()}function o(){i(d,v),za.lineEnd(),wo(m)>Ho&&(f=-(h=180)),M[0]=f,M[1]=h,y=null}function a(n,t){return(t-=n)<0?t+360:t}function l(n,t){return n[0]-t[0]}function c(n,t){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var f,s,h,p,g,d,v,y,m,x,M,b={point:n,lineStart:e,lineEnd:r,polygonStart:function(){b.point=i,b.lineStart=u,b.lineEnd=o,m=0,za.polygonStart()},polygonEnd:function(){za.polygonEnd(),b.point=n,b.lineStart=e,b.lineEnd=r,Aa<0?(f=-(h=180),s=-(p=90)):m>Ho?p=90:m<-Ho&&(s=-90),M[0]=f,M[1]=h}};return function(n){p=h=-(f=s=1/0),x=[],ho.geo.stream(n,b);var t=x.length;if(t){x.sort(l);for(var e,r=1,i=x[0],u=[i];r<t;++r)e=x[r],c(e[0],i)||c(e[1],i)?(a(i[0],e[1])>a(i[0],i[1])&&(i[1]=e[1]),a(e[0],i[1])>a(i[0],i[1])&&(i[0]=e[0])):u.push(i=e);for(var o,e,g=-(1/0),t=u.length-1,r=0,i=u[t];r<=t;i=e,++r)e=u[r],(o=a(i[1],e[0]))>g&&(g=o,f=e[0],h=i[1])}return x=M=null,f===1/0||s===1/0?[[NaN,NaN],[NaN,NaN]]:[[f,s],[h,p]]}}(),ho.geo.centroid=function(n){Ca=La=qa=Ta=Pa=Ra=Da=Ua=ja=Fa=Ha=0,ho.geo.stream(n,Oa);var t=ja,e=Fa,r=Ha,i=t*t+e*e+r*r;return i<Oo&&(t=Ra,e=Da,r=Ua,La<Ho&&(t=qa,e=Ta,r=Pa),i=t*t+e*e+r*r,i<Oo)?[NaN,NaN]:[Math.atan2(e,t)*Xo,an(r/Math.sqrt(i))*Xo]};var Ca,La,qa,Ta,Pa,Ra,Da,Ua,ja,Fa,Ha,Oa={sphere:N,point:zt,lineStart:Lt,lineEnd:qt,polygonStart:function(){Oa.lineStart=Tt},polygonEnd:function(){Oa.lineStart=Lt}},Ia=Ft(Rt,Yt,Vt,[-Io,-Io/2]),Ya=1e9;ho.geo.clipExtent=function(){var n,t,e,r,i,u,o={stream:function(n){return i&&(i.valid=!1),i=u(n),i.valid=!0,i},extent:function(a){return arguments.length?(u=Wt(n=+a[0][0],t=+a[0][1],e=+a[1][0],r=+a[1][1]),i&&(i.valid=!1,i=null),o):[[n,t],[e,r]]}};return o.extent([[0,0],[960,500]])},(ho.geo.conicEqualArea=function(){return Jt(Gt)}).raw=Gt,ho.geo.albers=function(){return ho.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},ho.geo.albersUsa=function(){function n(n){var u=n[0],o=n[1];return t=null,e(u,o),t||(r(u,o),t)||i(u,o),t}var t,e,r,i,u=ho.geo.albers(),o=ho.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),a=ho.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),l={point:function(n,e){t=[n,e]}};return n.invert=function(n){var t=u.scale(),e=u.translate(),r=(n[0]-e[0])/t,i=(n[1]-e[1])/t;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?o:i>=.166&&i<.234&&r>=-.214&&r<-.115?a:u).invert(n)},n.stream=function(n){var t=u.stream(n),e=o.stream(n),r=a.stream(n);return{point:function(n,i){t.point(n,i),e.point(n,i),r.point(n,i)},sphere:function(){t.sphere(),e.sphere(),r.sphere()},lineStart:function(){t.lineStart(),e.lineStart(),r.lineStart()},lineEnd:function(){t.lineEnd(),e.lineEnd(),r.lineEnd()},polygonStart:function(){t.polygonStart(),e.polygonStart(),r.polygonStart()},polygonEnd:function(){t.polygonEnd(),e.polygonEnd(),r.polygonEnd()}}},n.precision=function(t){return arguments.length?(u.precision(t),o.precision(t),a.precision(t),n):u.precision()},n.scale=function(t){return arguments.length?(u.scale(t),o.scale(.35*t),a.scale(t),n.translate(u.translate())):u.scale()},n.translate=function(t){if(!arguments.length)return u.translate();var c=u.scale(),f=+t[0],s=+t[1];return e=u.translate(t).clipExtent([[f-.455*c,s-.238*c],[f+.455*c,s+.238*c]]).stream(l).point,r=o.translate([f-.307*c,s+.201*c]).clipExtent([[f-.425*c+Ho,s+.12*c+Ho],[f-.214*c-Ho,s+.234*c-Ho]]).stream(l).point,i=a.translate([f-.205*c,s+.212*c]).clipExtent([[f-.214*c+Ho,s+.166*c+Ho],[f-.115*c-Ho,s+.234*c-Ho]]).stream(l).point,n},n.scale(1070)};var Za,Va,Ba,Xa,$a,Wa,Ja={point:N,lineStart:N,lineEnd:N,polygonStart:function(){Va=0,Ja.lineStart=Kt},polygonEnd:function(){Ja.lineStart=Ja.lineEnd=Ja.point=N,Za+=wo(Va/2)}},Ga={point:Qt,lineStart:N,lineEnd:N,polygonStart:N,polygonEnd:N},Ka={point:ee,lineStart:re,lineEnd:ie,polygonStart:function(){Ka.lineStart=ue},polygonEnd:function(){Ka.point=ee,Ka.lineStart=re,Ka.lineEnd=ie}};ho.geo.path=function(){function n(n){return n&&("function"==typeof a&&u.pointRadius(+a.apply(this,arguments)),o&&o.valid||(o=i(u)),ho.geo.stream(n,o)),u.result()}function t(){return o=null,n}var e,r,i,u,o,a=4.5;return n.area=function(n){return Za=0,ho.geo.stream(n,i(Ja)),Za},n.centroid=function(n){return qa=Ta=Pa=Ra=Da=Ua=ja=Fa=Ha=0,ho.geo.stream(n,i(Ka)),Ha?[ja/Ha,Fa/Ha]:Ua?[Ra/Ua,Da/Ua]:Pa?[qa/Pa,Ta/Pa]:[NaN,NaN]},n.bounds=function(n){return $a=Wa=-(Ba=Xa=1/0),ho.geo.stream(n,i(Ga)),[[Ba,Xa],[$a,Wa]]},n.projection=function(n){return arguments.length?(i=(e=n)?n.stream||le(n):w,t()):e},n.context=function(n){return arguments.length?(u=null==(r=n)?new ne:new oe(n),"function"!=typeof a&&u.pointRadius(a),t()):r},n.pointRadius=function(t){return arguments.length?(a="function"==typeof t?t:(u.pointRadius(+t),+t),n):a},n.projection(ho.geo.albersUsa()).context(null)},ho.geo.transform=function(n){return{stream:function(t){var e=new ce(t);for(var r in n)e[r]=n[r];return e}}},ce.prototype={point:function(n,t){this.stream.point(n,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},ho.geo.projection=se,ho.geo.projectionMutator=he,(ho.geo.equirectangular=function(){return se(ge)}).raw=ge.invert=ge,ho.geo.rotation=function(n){function t(t){return t=n(t[0]*Bo,t[1]*Bo),t[0]*=Xo,t[1]*=Xo,t}return n=ve(n[0]%360*Bo,n[1]*Bo,n.length>2?n[2]*Bo:0),t.invert=function(t){return t=n.invert(t[0]*Bo,t[1]*Bo),t[0]*=Xo,t[1]*=Xo,t},t},de.invert=ge,ho.geo.circle=function(){function n(){var n="function"==typeof r?r.apply(this,arguments):r,t=ve(-n[0]*Bo,-n[1]*Bo,0).invert,i=[];return e(null,null,1,{point:function(n,e){i.push(n=t(n,e)),n[0]*=Xo,n[1]*=Xo}}),{type:"Polygon",coordinates:[i]}}var t,e,r=[0,0],i=6;return n.origin=function(t){return arguments.length?(r=t,n):r},n.angle=function(r){return arguments.length?(e=Me((t=+r)*Bo,i*Bo),n):t},n.precision=function(r){return arguments.length?(e=Me(t*Bo,(i=+r)*Bo),n):i},n.angle(90)},ho.geo.distance=function(n,t){var e,r=(t[0]-n[0])*Bo,i=n[1]*Bo,u=t[1]*Bo,o=Math.sin(r),a=Math.cos(r),l=Math.sin(i),c=Math.cos(i),f=Math.sin(u),s=Math.cos(u);return Math.atan2(Math.sqrt((e=s*o)*e+(e=c*f-l*s*a)*e),l*f+c*s*a)},ho.geo.graticule=function(){function n(){return{type:"MultiLineString",coordinates:t()}}function t(){return ho.range(Math.ceil(u/v)*v,i,v).map(h).concat(ho.range(Math.ceil(c/y)*y,l,y).map(p)).concat(ho.range(Math.ceil(r/g)*g,e,g).filter(function(n){return wo(n%v)>Ho}).map(f)).concat(ho.range(Math.ceil(a/d)*d,o,d).filter(function(n){return wo(n%y)>Ho}).map(s))}var e,r,i,u,o,a,l,c,f,s,h,p,g=10,d=g,v=90,y=360,m=2.5;return n.lines=function(){return t().map(function(n){return{type:"LineString",coordinates:n}})},n.outline=function(){return{type:"Polygon",coordinates:[h(u).concat(p(l).slice(1),h(i).reverse().slice(1),p(c).reverse().slice(1))]}},n.extent=function(t){return arguments.length?n.majorExtent(t).minorExtent(t):n.minorExtent()},n.majorExtent=function(t){return arguments.length?(u=+t[0][0],i=+t[1][0],c=+t[0][1],l=+t[1][1],u>i&&(t=u,u=i,i=t),c>l&&(t=c,c=l,l=t),n.precision(m)):[[u,c],[i,l]]},n.minorExtent=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],o=+t[1][1],r>e&&(t=r,r=e,e=t),a>o&&(t=a,a=o,o=t),n.precision(m)):[[r,a],[e,o]]},n.step=function(t){return arguments.length?n.majorStep(t).minorStep(t):n.minorStep()},n.majorStep=function(t){return arguments.length?(v=+t[0],y=+t[1],n):[v,y]},n.minorStep=function(t){return arguments.length?(g=+t[0],d=+t[1],n):[g,d]},n.precision=function(t){return arguments.length?(m=+t,f=_e(a,o,90),s=we(r,e,m),h=_e(c,l,90),p=we(u,i,m),n):m},n.majorExtent([[-180,-90+Ho],[180,90-Ho]]).minorExtent([[-180,-80-Ho],[180,80+Ho]])},ho.geo.greatArc=function(){function n(){return{type:"LineString",coordinates:[t||r.apply(this,arguments),e||i.apply(this,arguments)]}}var t,e,r=ke,i=Se;return n.distance=function(){return ho.geo.distance(t||r.apply(this,arguments),e||i.apply(this,arguments))},n.source=function(e){return arguments.length?(r=e,t="function"==typeof e?null:e,n):r},n.target=function(t){return arguments.length?(i=t,e="function"==typeof t?null:t,n):i},n.precision=function(){return arguments.length?n:0},n},ho.geo.interpolate=function(n,t){return Ne(n[0]*Bo,n[1]*Bo,t[0]*Bo,t[1]*Bo)},ho.geo.length=function(n){return Qa=0,ho.geo.stream(n,nl),Qa};var Qa,nl={sphere:N,point:N,lineStart:Ee,lineEnd:N,polygonStart:N,polygonEnd:N},tl=Ae(function(n){return Math.sqrt(2/(1+n))},function(n){return 2*Math.asin(n/2)});(ho.geo.azimuthalEqualArea=function(){return se(tl)}).raw=tl;var el=Ae(function(n){var t=Math.acos(n);return t&&t/Math.sin(t)},w);(ho.geo.azimuthalEquidistant=function(){return se(el)}).raw=el,(ho.geo.conicConformal=function(){return Jt(ze)}).raw=ze,(ho.geo.conicEquidistant=function(){return Jt(Ce)}).raw=Ce;var rl=Ae(function(n){return 1/n},Math.atan);(ho.geo.gnomonic=function(){return se(rl)}).raw=rl,Le.invert=function(n,t){return[n,2*Math.atan(Math.exp(t))-Vo]},(ho.geo.mercator=function(){return qe(Le)}).raw=Le;var il=Ae(function(){return 1},Math.asin);(ho.geo.orthographic=function(){return se(il)}).raw=il;var ul=Ae(function(n){return 1/(1+n)},function(n){return 2*Math.atan(n)});(ho.geo.stereographic=function(){return se(ul)}).raw=ul,Te.invert=function(n,t){return[-t,2*Math.atan(Math.exp(n))-Vo]},(ho.geo.transverseMercator=function(){var n=qe(Te),t=n.center,e=n.rotate;return n.center=function(n){return n?t([-n[1],n[0]]):(n=t(),[n[1],-n[0]])},n.rotate=function(n){return n?e([n[0],n[1],n.length>2?n[2]+90:90]):(n=e(),[n[0],n[1],n[2]-90])},e([0,0,90])}).raw=Te,ho.geom={},ho.geom.hull=function(n){function t(n){if(n.length<3)return[];var t,i=qn(e),u=qn(r),o=n.length,a=[],l=[];for(t=0;t<o;t++)a.push([+i.call(this,n[t],t),+u.call(this,n[t],t),t]);for(a.sort(Ue),t=0;t<o;t++)l.push([a[t][0],-a[t][1]]);var c=De(a),f=De(l),s=f[0]===c[0],h=f[f.length-1]===c[c.length-1],p=[];for(t=c.length-1;t>=0;--t)p.push(n[a[c[t]][2]]);for(t=+s;t<f.length-h;++t)p.push(n[a[f[t]][2]]);return p}var e=Pe,r=Re;return arguments.length?t(n):(t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t)},ho.geom.polygon=function(n){return Ao(n,ol),n};var ol=ho.geom.polygon.prototype=[];ol.area=function(){for(var n,t=-1,e=this.length,r=this[e-1],i=0;++t<e;)n=r,r=this[t],i+=n[1]*r[0]-n[0]*r[1];return.5*i},ol.centroid=function(n){var t,e,r=-1,i=this.length,u=0,o=0,a=this[i-1];for(arguments.length||(n=-1/(6*this.area()));++r<i;)t=a,a=this[r],e=t[0]*a[1]-a[0]*t[1],u+=(t[0]+a[0])*e,o+=(t[1]+a[1])*e;return[u*n,o*n]},ol.clip=function(n){for(var t,e,r,i,u,o,a=He(n),l=-1,c=this.length-He(this),f=this[c-1];++l<c;){for(t=n.slice(),n.length=0,i=this[l],u=t[(r=t.length-a)-1],e=-1;++e<r;)o=t[e],je(o,f,i)?(je(u,f,i)||n.push(Fe(u,o,f,i)),n.push(o)):je(u,f,i)&&n.push(Fe(u,o,f,i)),u=o;a&&n.push(n[0]),f=i}return n};var al,ll,cl,fl,sl,hl=[],pl=[];$e.prototype.prepare=function(){for(var n,t=this.edges,e=t.length;e--;)n=t[e].edge,n.b&&n.a||t.splice(e,1);return t.sort(Je),t.length},or.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},ar.prototype={insert:function(n,t){var e,r,i;if(n){if(t.P=n,t.N=n.N,n.N&&(n.N.P=t),n.N=t,n.R){for(n=n.R;n.L;)n=n.L;n.L=t}else n.R=t;e=n}else this._?(n=sr(this._),t.P=null,t.N=n,n.P=n.L=t,e=n):(t.P=t.N=null,this._=t,e=null);for(t.L=t.R=null,t.U=e,t.C=!0,n=t;e&&e.C;)r=e.U,e===r.L?(i=r.R,i&&i.C?(e.C=i.C=!1,r.C=!0,n=r):(n===e.R&&(cr(this,e),n=e,e=n.U),e.C=!1,r.C=!0,fr(this,r))):(i=r.L,i&&i.C?(e.C=i.C=!1,r.C=!0,n=r):(n===e.L&&(fr(this,e),n=e,e=n.U),e.C=!1,r.C=!0,cr(this,r))),e=n.U;this._.C=!1},remove:function(n){n.N&&(n.N.P=n.P),n.P&&(n.P.N=n.N),n.N=n.P=null;var t,e,r,i=n.U,u=n.L,o=n.R;if(e=u?o?sr(o):u:o,i?i.L===n?i.L=e:i.R=e:this._=e,u&&o?(r=e.C,e.C=n.C,e.L=u,u.U=e,e!==o?(i=e.U,e.U=n.U,n=e.R,i.L=n,e.R=o,o.U=e):(e.U=i,i=e,n=e.R)):(r=n.C,n=e),n&&(n.U=i),!r){if(n&&n.C)return void(n.C=!1);do{if(n===this._)break;if(n===i.L){if(t=i.R,t.C&&(t.C=!1,i.C=!0,cr(this,i),t=i.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,fr(this,t),t=i.R),t.C=i.C,i.C=t.R.C=!1,cr(this,i),n=this._;break}}else if(t=i.L,t.C&&(t.C=!1,i.C=!0,fr(this,i),t=i.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,cr(this,t),t=i.L),t.C=i.C,i.C=t.L.C=!1,fr(this,i),n=this._;break}t.C=!0,n=i,i=i.U}while(!n.C);n&&(n.C=!1)}}},ho.geom.voronoi=function(n){function t(n){var t=new Array(n.length),r=a[0][0],i=a[0][1],u=a[1][0],o=a[1][1];return hr(e(n),a).cells.forEach(function(e,a){var l=e.edges,c=e.site,f=t[a]=l.length?l.map(function(n){var t=n.start();return[t.x,t.y]}):c.x>=r&&c.x<=u&&c.y>=i&&c.y<=o?[[r,o],[u,o],[u,i],[r,i]]:[];f.point=n[a]}),t}function e(n){return n.map(function(n,t){return{x:Math.round(u(n,t)/Ho)*Ho,y:Math.round(o(n,t)/Ho)*Ho,i:t}})}var r=Pe,i=Re,u=r,o=i,a=gl;return n?t(n):(t.links=function(n){return hr(e(n)).edges.filter(function(n){return n.l&&n.r}).map(function(t){return{source:n[t.l.i],target:n[t.r.i]}})},t.triangles=function(n){var t=[];return hr(e(n)).cells.forEach(function(e,r){for(var i,u,o=e.site,a=e.edges.sort(Je),l=-1,c=a.length,f=a[c-1].edge,s=f.l===o?f.r:f.l;++l<c;)i=f,u=s,f=a[l].edge,s=f.l===o?f.r:f.l,r<u.i&&r<s.i&&gr(o,u,s)<0&&t.push([n[r],n[u.i],n[s.i]])}),t},t.x=function(n){return arguments.length?(u=qn(r=n),t):r},t.y=function(n){return arguments.length?(o=qn(i=n),t):i},t.clipExtent=function(n){return arguments.length?(a=null==n?gl:n,t):a===gl?null:a},t.size=function(n){return arguments.length?t.clipExtent(n&&[[0,0],n]):a===gl?null:a&&a[1]},t)};var gl=[[-1e6,-1e6],[1e6,1e6]];ho.geom.delaunay=function(n){return ho.geom.voronoi().triangles(n)},ho.geom.quadtree=function(n,t,e,r,i){function u(n){function u(n,t,e,r,i,u,o,a){if(!isNaN(e)&&!isNaN(r))if(n.leaf){var l=n.x,f=n.y;if(null!=l)if(wo(l-e)+wo(f-r)<.01)c(n,t,e,r,i,u,o,a);else{var s=n.point;n.x=n.y=n.point=null,c(n,s,l,f,i,u,o,a),c(n,t,e,r,i,u,o,a)}else n.x=e,n.y=r,n.point=t}else c(n,t,e,r,i,u,o,a)}function c(n,t,e,r,i,o,a,l){var c=.5*(i+a),f=.5*(o+l),s=e>=c,h=r>=f,p=h<<1|s;n.leaf=!1,n=n.nodes[p]||(n.nodes[p]=yr()),s?i=c:a=c,h?o=f:l=f,u(n,t,e,r,i,o,a,l)}var f,s,h,p,g,d,v,y,m,x=qn(a),M=qn(l);if(null!=t)d=t,v=e,y=r,m=i;else if(y=m=-(d=v=1/0),s=[],h=[],g=n.length,o)for(p=0;p<g;++p)f=n[p],f.x<d&&(d=f.x),f.y<v&&(v=f.y),f.x>y&&(y=f.x),f.y>m&&(m=f.y),s.push(f.x),h.push(f.y);else for(p=0;p<g;++p){var b=+x(f=n[p],p),_=+M(f,p);b<d&&(d=b),_<v&&(v=_),b>y&&(y=b),_>m&&(m=_),s.push(b),h.push(_)}var w=y-d,k=m-v;w>k?m=v+w:y=d+k;var S=yr();if(S.add=function(n){u(S,n,+x(n,++p),+M(n,p),d,v,y,m)},S.visit=function(n){mr(n,S,d,v,y,m)},S.find=function(n){return xr(S,n[0],n[1],d,v,y,m)},p=-1,null==t){for(;++p<g;)u(S,n[p],s[p],h[p],d,v,y,m);--p}else n.forEach(S.add);return s=h=n=f=null,S}var o,a=Pe,l=Re;return(o=arguments.length)?(a=dr,l=vr,3===o&&(i=e,r=t,e=t=0),u(n)):(u.x=function(n){return arguments.length?(a=n,u):a},u.y=function(n){return arguments.length?(l=n,u):l},u.extent=function(n){return arguments.length?(null==n?t=e=r=i=null:(t=+n[0][0],e=+n[0][1],r=+n[1][0],i=+n[1][1]),u):null==t?null:[[t,e],[r,i]]},u.size=function(n){return arguments.length?(null==n?t=e=r=i=null:(t=e=0,r=+n[0],i=+n[1]),u):null==t?null:[r-t,i-e]},u)},ho.interpolateRgb=Mr,ho.interpolateObject=br,ho.interpolateNumber=_r,ho.interpolateString=wr;var dl=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,vl=new RegExp(dl.source,"g");ho.interpolate=kr,ho.interpolators=[function(n,t){var e=typeof t;return("string"===e?la.has(t.toLowerCase())||/^(#|rgb\(|hsl\()/i.test(t)?Mr:wr:t instanceof hn?Mr:Array.isArray(t)?Sr:"object"===e&&isNaN(t)?br:_r)(n,t)}],ho.interpolateArray=Sr;var yl=function(){return w},ml=ho.map({linear:yl,poly:qr,quad:function(){return zr},cubic:function(){return Cr},sin:function(){return Tr},exp:function(){return Pr},circle:function(){return Rr},elastic:Dr,back:Ur,bounce:function(){return jr}}),xl=ho.map({in:w,out:Er,"in-out":Ar,"out-in":function(n){return Ar(Er(n))}});ho.ease=function(n){var t=n.indexOf("-"),e=t>=0?n.slice(0,t):n,r=t>=0?n.slice(t+1):"in";return e=ml.get(e)||yl,r=xl.get(r)||w,Nr(r(e.apply(null,po.call(arguments,1))))},ho.interpolateHcl=Fr,ho.interpolateHsl=Hr,ho.interpolateLab=Or,ho.interpolateRound=Ir,ho.transform=function(n){var t=vo.createElementNS(ho.ns.prefix.svg,"g");return(ho.transform=function(n){if(null!=n){t.setAttribute("transform",n);var e=t.transform.baseVal.consolidate()}return new Yr(e?e.matrix:Ml)})(n)},Yr.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var Ml={a:1,b:0,c:0,d:1,e:0,f:0};ho.interpolateTransform=Kr,ho.layout={},ho.layout.bundle=function(){return function(n){for(var t=[],e=-1,r=n.length;++e<r;)t.push(ti(n[e]));return t}},ho.layout.chord=function(){function n(){var n,c,s,h,p,g={},d=[],v=ho.range(u),y=[];for(e=[],r=[],n=0,h=-1;++h<u;){for(c=0,p=-1;++p<u;)c+=i[h][p];d.push(c),y.push(ho.range(u)),n+=c}for(o&&v.sort(function(n,t){return o(d[n],d[t])}),a&&y.forEach(function(n,t){n.sort(function(n,e){return a(i[t][n],i[t][e])})}),n=(Yo-f*u)/n,c=0,h=-1;++h<u;){for(s=c,p=-1;++p<u;){var m=v[h],x=y[m][p],M=i[m][x],b=c,_=c+=M*n;g[m+"-"+x]={index:m,subindex:x,startAngle:b,endAngle:_,value:M}}r[m]={index:m,startAngle:s,endAngle:c,value:d[m]},c+=f}for(h=-1;++h<u;)for(p=h-1;++p<u;){var w=g[h+"-"+p],k=g[p+"-"+h];(w.value||k.value)&&e.push(w.value<k.value?{source:k,target:w}:{source:w,target:k})}l&&t()}function t(){e.sort(function(n,t){return l((n.source.value+n.target.value)/2,(t.source.value+t.target.value)/2)})}var e,r,i,u,o,a,l,c={},f=0;return c.matrix=function(n){return arguments.length?(u=(i=n)&&i.length,e=r=null,c):i},c.padding=function(n){return arguments.length?(f=n,e=r=null,c):f},c.sortGroups=function(n){return arguments.length?(o=n,e=r=null,c):o},c.sortSubgroups=function(n){return arguments.length?(a=n,e=null,c):a},c.sortChords=function(n){return arguments.length?(l=n,e&&t(),c):l},c.chords=function(){return e||n(),e},c.groups=function(){return r||n(),r},c},ho.layout.force=function(){function n(n){return function(t,e,r,i){if(t.point!==n){var u=t.cx-n.x,o=t.cy-n.y,a=i-e,l=u*u+o*o;if(a*a/y<l){if(l<d){var c=t.charge/l;n.px-=u*c,n.py-=o*c}return!0}if(t.point&&l&&l<d){var c=t.pointCharge/l;n.px-=u*c,n.py-=o*c}}return!t.charge}}function t(n){n.px=ho.event.x,n.py=ho.event.y,l.resume()}var e,r,i,u,o,a,l={},c=ho.dispatch("start","tick","end"),f=[1,1],s=.9,h=bl,p=_l,g=-30,d=wl,v=.1,y=.64,m=[],x=[];return l.tick=function(){if((i*=.99)<.005)return e=null,c.end({type:"end",alpha:i=0}),!0;var t,r,l,h,p,d,y,M,b,_=m.length,w=x.length;for(r=0;r<w;++r)l=x[r],h=l.source,p=l.target,M=p.x-h.x,b=p.y-h.y,(d=M*M+b*b)&&(d=i*o[r]*((d=Math.sqrt(d))-u[r])/d,M*=d,b*=d,p.x-=M*(y=h.weight+p.weight?h.weight/(h.weight+p.weight):.5),p.y-=b*y,h.x+=M*(y=1-y),h.y+=b*y);if((y=i*v)&&(M=f[0]/2,b=f[1]/2,r=-1,y))for(;++r<_;)l=m[r],l.x+=(M-l.x)*y,l.y+=(b-l.y)*y;if(g)for(li(t=ho.geom.quadtree(m),i,a),r=-1;++r<_;)(l=m[r]).fixed||t.visit(n(l));for(r=-1;++r<_;)l=m[r],l.fixed?(l.x=l.px,l.y=l.py):(l.x-=(l.px-(l.px=l.x))*s,l.y-=(l.py-(l.py=l.y))*s);c.tick({type:"tick",alpha:i})},l.nodes=function(n){return arguments.length?(m=n,l):m},l.links=function(n){return arguments.length?(x=n,l):x},l.size=function(n){return arguments.length?(f=n,l):f},l.linkDistance=function(n){return arguments.length?(h="function"==typeof n?n:+n,l):h},l.distance=l.linkDistance,l.linkStrength=function(n){return arguments.length?(p="function"==typeof n?n:+n,l):p},l.friction=function(n){return arguments.length?(s=+n,l):s},l.charge=function(n){return arguments.length?(g="function"==typeof n?n:+n,l):g},l.chargeDistance=function(n){return arguments.length?(d=n*n,l):Math.sqrt(d)},l.gravity=function(n){return arguments.length?(v=+n,l):v},l.theta=function(n){return arguments.length?(y=n*n,l):Math.sqrt(y)},l.alpha=function(n){return arguments.length?(n=+n,i?n>0?i=n:(e.c=null,e.t=NaN,e=null,c.end({type:"end",alpha:i=0})):n>0&&(c.start({type:"start",alpha:i=n}),e=Un(l.tick)),l):i},l.start=function(){function n(n,r){if(!e){for(e=new Array(i),l=0;l<i;++l)e[l]=[];for(l=0;l<c;++l){var u=x[l];e[u.source.index].push(u.target),e[u.target.index].push(u.source)}}for(var o,a=e[t],l=-1,f=a.length;++l<f;)if(!isNaN(o=a[l][n]))return o;return Math.random()*r}var t,e,r,i=m.length,c=x.length,s=f[0],d=f[1];for(t=0;t<i;++t)(r=m[t]).index=t,r.weight=0;for(t=0;t<c;++t)r=x[t],"number"==typeof r.source&&(r.source=m[r.source]),"number"==typeof r.target&&(r.target=m[r.target]),++r.source.weight,++r.target.weight;for(t=0;t<i;++t)r=m[t],isNaN(r.x)&&(r.x=n("x",s)),isNaN(r.y)&&(r.y=n("y",d)),isNaN(r.px)&&(r.px=r.x),isNaN(r.py)&&(r.py=r.y);if(u=[],"function"==typeof h)for(t=0;t<c;++t)u[t]=+h.call(this,x[t],t);else for(t=0;t<c;++t)u[t]=h;if(o=[],"function"==typeof p)for(t=0;t<c;++t)o[t]=+p.call(this,x[t],t);else for(t=0;t<c;++t)o[t]=p;if(a=[],"function"==typeof g)for(t=0;t<i;++t)a[t]=+g.call(this,m[t],t);else for(t=0;t<i;++t)a[t]=g;return l.resume()},l.resume=function(){return l.alpha(.1)},l.stop=function(){return l.alpha(0)},l.drag=function(){return r||(r=ho.behavior.drag().origin(w).on("dragstart.force",ii).on("drag.force",t).on("dragend.force",ui)),arguments.length?void this.on("mouseover.force",oi).on("mouseout.force",ai).call(r):r},ho.rebind(l,c,"on")};var bl=20,_l=1,wl=1/0;ho.layout.hierarchy=function(){function n(i){var u,o=[i],a=[];for(i.depth=0;null!=(u=o.pop());)if(a.push(u),(c=e.call(n,u,u.depth))&&(l=c.length)){for(var l,c,f;--l>=0;)o.push(f=c[l]),f.parent=u,f.depth=u.depth+1;r&&(u.value=0),u.children=c}else r&&(u.value=+r.call(n,u,u.depth)||0),delete u.children;return si(i,function(n){var e,i;t&&(e=n.children)&&e.sort(t),r&&(i=n.parent)&&(i.value+=n.value)}),a}var t=gi,e=hi,r=pi;return n.sort=function(e){return arguments.length?(t=e,n):t},n.children=function(t){return arguments.length?(e=t,n):e},n.value=function(t){return arguments.length?(r=t,n):r},n.revalue=function(t){return r&&(fi(t,function(n){n.children&&(n.value=0)}),si(t,function(t){var e;t.children||(t.value=+r.call(n,t,t.depth)||0),(e=t.parent)&&(e.value+=t.value)})),t},n},ho.layout.partition=function(){function n(t,e,r,i){var u=t.children;if(t.x=e,t.y=t.depth*i,t.dx=r,t.dy=i,u&&(o=u.length)){var o,a,l,c=-1;for(r=t.value?r/t.value:0;++c<o;)n(a=u[c],e,l=a.value*r,i),e+=l}}function t(n){var e=n.children,r=0;if(e&&(i=e.length))for(var i,u=-1;++u<i;)r=Math.max(r,t(e[u]));return 1+r}function e(e,u){var o=r.call(this,e,u);return n(o[0],0,i[0],i[1]/t(o[0])),o}var r=ho.layout.hierarchy(),i=[1,1];return e.size=function(n){return arguments.length?(i=n,e):i},ci(e,r)},ho.layout.pie=function(){function n(o){var a,l=o.length,c=o.map(function(e,r){return+t.call(n,e,r)}),f=+("function"==typeof r?r.apply(this,arguments):r),s=("function"==typeof i?i.apply(this,arguments):i)-f,h=Math.min(Math.abs(s)/l,+("function"==typeof u?u.apply(this,arguments):u)),p=h*(s<0?-1:1),g=ho.sum(c),d=g?(s-l*p)/g:0,v=ho.range(l),y=[];return null!=e&&v.sort(e===kl?function(n,t){return c[t]-c[n]}:function(n,t){return e(o[n],o[t])}),v.forEach(function(n){y[n]={data:o[n],value:a=c[n],startAngle:f,endAngle:f+=a*d+p,padAngle:h}}),y}var t=Number,e=kl,r=0,i=Yo,u=0;return n.value=function(e){return arguments.length?(t=e,n):t},n.sort=function(t){return arguments.length?(e=t,n):e},n.startAngle=function(t){return arguments.length?(r=t,n):r},n.endAngle=function(t){return arguments.length?(i=t,n):i},n.padAngle=function(t){return arguments.length?(u=t,n):u},n};var kl={};ho.layout.stack=function(){function n(a,l){if(!(h=a.length))return a;var c=a.map(function(e,r){return t.call(n,e,r)}),f=c.map(function(t){return t.map(function(t,e){return[u.call(n,t,e),o.call(n,t,e)]})}),s=e.call(n,f,l);c=ho.permute(c,s),f=ho.permute(f,s);var h,p,g,d,v=r.call(n,f,l),y=c[0].length;for(g=0;g<y;++g)for(i.call(n,c[0][g],d=v[g],f[0][g][1]),p=1;p<h;++p)i.call(n,c[p][g],d+=f[p-1][g][1],f[p][g][1]);return a}var t=w,e=xi,r=Mi,i=mi,u=vi,o=yi;return n.values=function(e){return arguments.length?(t=e,n):t},n.order=function(t){return arguments.length?(e="function"==typeof t?t:Sl.get(t)||xi,n):e},n.offset=function(t){return arguments.length?(r="function"==typeof t?t:Nl.get(t)||Mi,n):r},n.x=function(t){return arguments.length?(u=t,n):u},n.y=function(t){return arguments.length?(o=t,n):o},n.out=function(t){return arguments.length?(i=t,n):i},n};var Sl=ho.map({"inside-out":function(n){var t,e,r=n.length,i=n.map(bi),u=n.map(_i),o=ho.range(r).sort(function(n,t){return i[n]-i[t]}),a=0,l=0,c=[],f=[];for(t=0;t<r;++t)e=o[t],a<l?(a+=u[e],c.push(e)):(l+=u[e],f.push(e));return f.reverse().concat(c)},reverse:function(n){return ho.range(n.length).reverse()},default:xi}),Nl=ho.map({silhouette:function(n){var t,e,r,i=n.length,u=n[0].length,o=[],a=0,l=[];for(e=0;e<u;++e){for(t=0,r=0;t<i;t++)r+=n[t][e][1];r>a&&(a=r),o.push(r)}for(e=0;e<u;++e)l[e]=(a-o[e])/2;return l},wiggle:function(n){var t,e,r,i,u,o,a,l,c,f=n.length,s=n[0],h=s.length,p=[];for(p[0]=l=c=0,e=1;e<h;++e){for(t=0,i=0;t<f;++t)i+=n[t][e][1];for(t=0,u=0,a=s[e][0]-s[e-1][0];t<f;++t){for(r=0,o=(n[t][e][1]-n[t][e-1][1])/(2*a);r<t;++r)o+=(n[r][e][1]-n[r][e-1][1])/a;u+=o*n[t][e][1]}p[e]=l-=i?u/i*a:0,l<c&&(c=l)}for(e=0;e<h;++e)p[e]-=c;return p},expand:function(n){var t,e,r,i=n.length,u=n[0].length,o=1/i,a=[];for(e=0;e<u;++e){for(t=0,r=0;t<i;t++)r+=n[t][e][1];if(r)for(t=0;t<i;t++)n[t][e][1]/=r;else for(t=0;t<i;t++)n[t][e][1]=o}for(e=0;e<u;++e)a[e]=0;return a},zero:Mi});ho.layout.histogram=function(){function n(n,u){for(var o,a,l=[],c=n.map(e,this),f=r.call(this,c,u),s=i.call(this,f,c,u),u=-1,h=c.length,p=s.length-1,g=t?1:1/h;++u<p;)o=l[u]=[],o.dx=s[u+1]-(o.x=s[u]),o.y=0;if(p>0)for(u=-1;++u<h;)a=c[u],a>=f[0]&&a<=f[1]&&(o=l[ho.bisect(s,a,1,p)-1],o.y+=g,o.push(n[u]));return l}var t=!0,e=Number,r=Ni,i=ki;return n.value=function(t){return arguments.length?(e=t,n):e},n.range=function(t){return arguments.length?(r=qn(t),n):r},n.bins=function(t){return arguments.length?(i="number"==typeof t?function(n){return Si(n,t)}:qn(t),n):i},n.frequency=function(e){return arguments.length?(t=!!e,n):t},n},ho.layout.pack=function(){function n(n,u){var o=e.call(this,n,u),a=o[0],l=i[0],c=i[1],f=null==t?Math.sqrt:"function"==typeof t?t:function(){return t};if(a.x=a.y=0,si(a,function(n){n.r=+f(n.value)}),si(a,Li),
r){var s=r*(t?1:Math.max(2*a.r/l,2*a.r/c))/2;si(a,function(n){n.r+=s}),si(a,Li),si(a,function(n){n.r-=s})}return Pi(a,l/2,c/2,t?1:1/Math.max(2*a.r/l,2*a.r/c)),o}var t,e=ho.layout.hierarchy().sort(Ei),r=0,i=[1,1];return n.size=function(t){return arguments.length?(i=t,n):i},n.radius=function(e){return arguments.length?(t=null==e||"function"==typeof e?e:+e,n):t},n.padding=function(t){return arguments.length?(r=+t,n):r},ci(n,e)},ho.layout.tree=function(){function n(n,i){var f=o.call(this,n,i),s=f[0],h=t(s);if(si(h,e),h.parent.m=-h.z,fi(h,r),c)fi(s,u);else{var p=s,g=s,d=s;fi(s,function(n){n.x<p.x&&(p=n),n.x>g.x&&(g=n),n.depth>d.depth&&(d=n)});var v=a(p,g)/2-p.x,y=l[0]/(g.x+a(g,p)/2+v),m=l[1]/(d.depth||1);fi(s,function(n){n.x=(n.x+v)*y,n.y=n.depth*m})}return f}function t(n){for(var t,e={A:null,children:[n]},r=[e];null!=(t=r.pop());)for(var i,u=t.children,o=0,a=u.length;o<a;++o)r.push((u[o]=i={_:u[o],parent:t,children:(i=u[o].children)&&i.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:o}).a=i);return e.children[0]}function e(n){var t=n.children,e=n.parent.children,r=n.i?e[n.i-1]:null;if(t.length){Hi(n);var u=(t[0].z+t[t.length-1].z)/2;r?(n.z=r.z+a(n._,r._),n.m=n.z-u):n.z=u}else r&&(n.z=r.z+a(n._,r._));n.parent.A=i(n,r,n.parent.A||e[0])}function r(n){n._.x=n.z+n.parent.m,n.m+=n.parent.m}function i(n,t,e){if(t){for(var r,i=n,u=n,o=t,l=i.parent.children[0],c=i.m,f=u.m,s=o.m,h=l.m;o=ji(o),i=Ui(i),o&&i;)l=Ui(l),u=ji(u),u.a=n,r=o.z+s-i.z-c+a(o._,i._),r>0&&(Fi(Oi(o,n,e),n,r),c+=r,f+=r),s+=o.m,c+=i.m,h+=l.m,f+=u.m;o&&!ji(u)&&(u.t=o,u.m+=s-f),i&&!Ui(l)&&(l.t=i,l.m+=c-h,e=n)}return e}function u(n){n.x*=l[0],n.y=n.depth*l[1]}var o=ho.layout.hierarchy().sort(null).value(null),a=Di,l=[1,1],c=null;return n.separation=function(t){return arguments.length?(a=t,n):a},n.size=function(t){return arguments.length?(c=null==(l=t)?u:null,n):c?null:l},n.nodeSize=function(t){return arguments.length?(c=null==(l=t)?null:u,n):c?l:null},ci(n,o)},ho.layout.cluster=function(){function n(n,u){var o,a=t.call(this,n,u),l=a[0],c=0;si(l,function(n){var t=n.children;t&&t.length?(n.x=Yi(t),n.y=Ii(t)):(n.x=o?c+=e(n,o):0,n.y=0,o=n)});var f=Zi(l),s=Vi(l),h=f.x-e(f,s)/2,p=s.x+e(s,f)/2;return si(l,i?function(n){n.x=(n.x-l.x)*r[0],n.y=(l.y-n.y)*r[1]}:function(n){n.x=(n.x-h)/(p-h)*r[0],n.y=(1-(l.y?n.y/l.y:1))*r[1]}),a}var t=ho.layout.hierarchy().sort(null).value(null),e=Di,r=[1,1],i=!1;return n.separation=function(t){return arguments.length?(e=t,n):e},n.size=function(t){return arguments.length?(i=null==(r=t),n):i?null:r},n.nodeSize=function(t){return arguments.length?(i=null!=(r=t),n):i?r:null},ci(n,t)},ho.layout.treemap=function(){function n(n,t){for(var e,r,i=-1,u=n.length;++i<u;)r=(e=n[i]).value*(t<0?0:t),e.area=isNaN(r)||r<=0?0:r}function t(e){var u=e.children;if(u&&u.length){var o,a,l,c=s(e),f=[],h=u.slice(),g=1/0,d="slice"===p?c.dx:"dice"===p?c.dy:"slice-dice"===p?1&e.depth?c.dy:c.dx:Math.min(c.dx,c.dy);for(n(h,c.dx*c.dy/e.value),f.area=0;(l=h.length)>0;)f.push(o=h[l-1]),f.area+=o.area,"squarify"!==p||(a=r(f,d))<=g?(h.pop(),g=a):(f.area-=f.pop().area,i(f,d,c,!1),d=Math.min(c.dx,c.dy),f.length=f.area=0,g=1/0);f.length&&(i(f,d,c,!0),f.length=f.area=0),u.forEach(t)}}function e(t){var r=t.children;if(r&&r.length){var u,o=s(t),a=r.slice(),l=[];for(n(a,o.dx*o.dy/t.value),l.area=0;u=a.pop();)l.push(u),l.area+=u.area,null!=u.z&&(i(l,u.z?o.dx:o.dy,o,!a.length),l.length=l.area=0);r.forEach(e)}}function r(n,t){for(var e,r=n.area,i=0,u=1/0,o=-1,a=n.length;++o<a;)(e=n[o].area)&&(e<u&&(u=e),e>i&&(i=e));return r*=r,t*=t,r?Math.max(t*i*g/r,r/(t*u*g)):1/0}function i(n,t,e,r){var i,u=-1,o=n.length,a=e.x,c=e.y,f=t?l(n.area/t):0;if(t==e.dx){for((r||f>e.dy)&&(f=e.dy);++u<o;)i=n[u],i.x=a,i.y=c,i.dy=f,a+=i.dx=Math.min(e.x+e.dx-a,f?l(i.area/f):0);i.z=!0,i.dx+=e.x+e.dx-a,e.y+=f,e.dy-=f}else{for((r||f>e.dx)&&(f=e.dx);++u<o;)i=n[u],i.x=a,i.y=c,i.dx=f,c+=i.dy=Math.min(e.y+e.dy-c,f?l(i.area/f):0);i.z=!1,i.dy+=e.y+e.dy-c,e.x+=f,e.dx-=f}}function u(r){var i=o||a(r),u=i[0];return u.x=u.y=0,u.value?(u.dx=c[0],u.dy=c[1]):u.dx=u.dy=0,o&&a.revalue(u),n([u],u.dx*u.dy/u.value),(o?e:t)(u),h&&(o=i),i}var o,a=ho.layout.hierarchy(),l=Math.round,c=[1,1],f=null,s=Bi,h=!1,p="squarify",g=.5*(1+Math.sqrt(5));return u.size=function(n){return arguments.length?(c=n,u):c},u.padding=function(n){function t(t){var e=n.call(u,t,t.depth);return null==e?Bi(t):Xi(t,"number"==typeof e?[e,e,e,e]:e)}function e(t){return Xi(t,n)}if(!arguments.length)return f;var r;return s=null==(f=n)?Bi:"function"==(r=typeof n)?t:"number"===r?(n=[n,n,n,n],e):e,u},u.round=function(n){return arguments.length?(l=n?Math.round:Number,u):l!=Number},u.sticky=function(n){return arguments.length?(h=n,o=null,u):h},u.ratio=function(n){return arguments.length?(g=n,u):g},u.mode=function(n){return arguments.length?(p=n+"",u):p},ci(u,a)},ho.random={normal:function(n,t){var e=arguments.length;return e<2&&(t=1),e<1&&(n=0),function(){var e,r,i;do e=2*Math.random()-1,r=2*Math.random()-1,i=e*e+r*r;while(!i||i>1);return n+t*e*Math.sqrt(-2*Math.log(i)/i)}},logNormal:function(){var n=ho.random.normal.apply(ho,arguments);return function(){return Math.exp(n())}},bates:function(n){var t=ho.random.irwinHall(n);return function(){return t()/n}},irwinHall:function(n){return function(){for(var t=0,e=0;e<n;e++)t+=Math.random();return t}}},ho.scale={};var El={floor:w,ceil:w};ho.scale.linear=function(){return nu([0,1],[0,1],kr,!1)};var Al={s:1,g:1,p:1,r:1,e:1};ho.scale.log=function(){return lu(ho.scale.linear().domain([0,1]),10,!0,[1,10])};var zl=ho.format(".0e"),Cl={floor:function(n){return-Math.ceil(-n)},ceil:function(n){return-Math.floor(-n)}};ho.scale.pow=function(){return cu(ho.scale.linear(),1,[0,1])},ho.scale.sqrt=function(){return ho.scale.pow().exponent(.5)},ho.scale.ordinal=function(){return su([],{t:"range",a:[[]]})},ho.scale.category10=function(){return ho.scale.ordinal().range(Ll)},ho.scale.category20=function(){return ho.scale.ordinal().range(ql)},ho.scale.category20b=function(){return ho.scale.ordinal().range(Tl)},ho.scale.category20c=function(){return ho.scale.ordinal().range(Pl)};var Ll=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(Sn),ql=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(Sn),Tl=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(Sn),Pl=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(Sn);ho.scale.quantile=function(){return hu([],[])},ho.scale.quantize=function(){return pu(0,1,[0,1])},ho.scale.threshold=function(){return gu([.5],[0,1])},ho.scale.identity=function(){return du([0,1])},ho.svg={},ho.svg.arc=function(){function n(){var n=Math.max(0,+e.apply(this,arguments)),c=Math.max(0,+r.apply(this,arguments)),f=o.apply(this,arguments)-Vo,s=a.apply(this,arguments)-Vo,h=Math.abs(s-f),p=f>s?0:1;if(c<n&&(g=c,c=n,n=g),h>=Zo)return t(c,p)+(n?t(n,1-p):"")+"Z";var g,d,v,y,m,x,M,b,_,w,k,S,N=0,E=0,A=[];if((y=(+l.apply(this,arguments)||0)/2)&&(v=u===Rl?Math.sqrt(n*n+c*c):+u.apply(this,arguments),p||(E*=-1),c&&(E=an(v/c*Math.sin(y))),n&&(N=an(v/n*Math.sin(y)))),c){m=c*Math.cos(f+E),x=c*Math.sin(f+E),M=c*Math.cos(s-E),b=c*Math.sin(s-E);var z=Math.abs(s-f-2*E)<=Io?0:1;if(E&&_u(m,x,M,b)===p^z){var C=(f+s)/2;m=c*Math.cos(C),x=c*Math.sin(C),M=b=null}}else m=x=0;if(n){_=n*Math.cos(s-N),w=n*Math.sin(s-N),k=n*Math.cos(f+N),S=n*Math.sin(f+N);var L=Math.abs(f-s+2*N)<=Io?0:1;if(N&&_u(_,w,k,S)===1-p^L){var q=(f+s)/2;_=n*Math.cos(q),w=n*Math.sin(q),k=S=null}}else _=w=0;if(h>Ho&&(g=Math.min(Math.abs(c-n)/2,+i.apply(this,arguments)))>.001){d=n<c^p?0:1;var T=g,P=g;if(h<Io){var R=null==k?[_,w]:null==M?[m,x]:Fe([m,x],[k,S],[M,b],[_,w]),D=m-R[0],U=x-R[1],j=M-R[0],F=b-R[1],H=1/Math.sin(Math.acos((D*j+U*F)/(Math.sqrt(D*D+U*U)*Math.sqrt(j*j+F*F)))/2),O=Math.sqrt(R[0]*R[0]+R[1]*R[1]);P=Math.min(g,(n-O)/(H-1)),T=Math.min(g,(c-O)/(H+1))}if(null!=M){var I=wu(null==k?[_,w]:[k,S],[m,x],c,T,p),Y=wu([M,b],[_,w],c,T,p);g===T?A.push("M",I[0],"A",T,",",T," 0 0,",d," ",I[1],"A",c,",",c," 0 ",1-p^_u(I[1][0],I[1][1],Y[1][0],Y[1][1]),",",p," ",Y[1],"A",T,",",T," 0 0,",d," ",Y[0]):A.push("M",I[0],"A",T,",",T," 0 1,",d," ",Y[0])}else A.push("M",m,",",x);if(null!=k){var Z=wu([m,x],[k,S],n,-P,p),V=wu([_,w],null==M?[m,x]:[M,b],n,-P,p);g===P?A.push("L",V[0],"A",P,",",P," 0 0,",d," ",V[1],"A",n,",",n," 0 ",p^_u(V[1][0],V[1][1],Z[1][0],Z[1][1]),",",1-p," ",Z[1],"A",P,",",P," 0 0,",d," ",Z[0]):A.push("L",V[0],"A",P,",",P," 0 0,",d," ",Z[0])}else A.push("L",_,",",w)}else A.push("M",m,",",x),null!=M&&A.push("A",c,",",c," 0 ",z,",",p," ",M,",",b),A.push("L",_,",",w),null!=k&&A.push("A",n,",",n," 0 ",L,",",1-p," ",k,",",S);return A.push("Z"),A.join("")}function t(n,t){return"M0,"+n+"A"+n+","+n+" 0 1,"+t+" 0,"+-n+"A"+n+","+n+" 0 1,"+t+" 0,"+n}var e=yu,r=mu,i=vu,u=Rl,o=xu,a=Mu,l=bu;return n.innerRadius=function(t){return arguments.length?(e=qn(t),n):e},n.outerRadius=function(t){return arguments.length?(r=qn(t),n):r},n.cornerRadius=function(t){return arguments.length?(i=qn(t),n):i},n.padRadius=function(t){return arguments.length?(u=t==Rl?Rl:qn(t),n):u},n.startAngle=function(t){return arguments.length?(o=qn(t),n):o},n.endAngle=function(t){return arguments.length?(a=qn(t),n):a},n.padAngle=function(t){return arguments.length?(l=qn(t),n):l},n.centroid=function(){var n=(+e.apply(this,arguments)+ +r.apply(this,arguments))/2,t=(+o.apply(this,arguments)+ +a.apply(this,arguments))/2-Vo;return[Math.cos(t)*n,Math.sin(t)*n]},n};var Rl="auto";ho.svg.line=function(){return ku(w)};var Dl=ho.map({linear:Su,"linear-closed":Nu,step:Eu,"step-before":Au,"step-after":zu,basis:Ru,"basis-open":Du,"basis-closed":Uu,bundle:ju,cardinal:qu,"cardinal-open":Cu,"cardinal-closed":Lu,monotone:Zu});Dl.forEach(function(n,t){t.key=n,t.closed=/-closed$/.test(n)});var Ul=[0,2/3,1/3,0],jl=[0,1/3,2/3,0],Fl=[0,1/6,2/3,1/6];ho.svg.line.radial=function(){var n=ku(Vu);return n.radius=n.x,delete n.x,n.angle=n.y,delete n.y,n},Au.reverse=zu,zu.reverse=Au,ho.svg.area=function(){return Bu(w)},ho.svg.area.radial=function(){var n=Bu(Vu);return n.radius=n.x,delete n.x,n.innerRadius=n.x0,delete n.x0,n.outerRadius=n.x1,delete n.x1,n.angle=n.y,delete n.y,n.startAngle=n.y0,delete n.y0,n.endAngle=n.y1,delete n.y1,n},ho.svg.chord=function(){function n(n,a){var l=t(this,u,n,a),c=t(this,o,n,a);return"M"+l.p0+r(l.r,l.p1,l.a1-l.a0)+(e(l,c)?i(l.r,l.p1,l.r,l.p0):i(l.r,l.p1,c.r,c.p0)+r(c.r,c.p1,c.a1-c.a0)+i(c.r,c.p1,l.r,l.p0))+"Z"}function t(n,t,e,r){var i=t.call(n,e,r),u=a.call(n,i,r),o=l.call(n,i,r)-Vo,f=c.call(n,i,r)-Vo;return{r:u,a0:o,a1:f,p0:[u*Math.cos(o),u*Math.sin(o)],p1:[u*Math.cos(f),u*Math.sin(f)]}}function e(n,t){return n.a0==t.a0&&n.a1==t.a1}function r(n,t,e){return"A"+n+","+n+" 0 "+ +(e>Io)+",1 "+t}function i(n,t,e,r){return"Q 0,0 "+r}var u=ke,o=Se,a=Xu,l=xu,c=Mu;return n.radius=function(t){return arguments.length?(a=qn(t),n):a},n.source=function(t){return arguments.length?(u=qn(t),n):u},n.target=function(t){return arguments.length?(o=qn(t),n):o},n.startAngle=function(t){return arguments.length?(l=qn(t),n):l},n.endAngle=function(t){return arguments.length?(c=qn(t),n):c},n},ho.svg.diagonal=function(){function n(n,i){var u=t.call(this,n,i),o=e.call(this,n,i),a=(u.y+o.y)/2,l=[u,{x:u.x,y:a},{x:o.x,y:a},o];return l=l.map(r),"M"+l[0]+"C"+l[1]+" "+l[2]+" "+l[3]}var t=ke,e=Se,r=$u;return n.source=function(e){return arguments.length?(t=qn(e),n):t},n.target=function(t){return arguments.length?(e=qn(t),n):e},n.projection=function(t){return arguments.length?(r=t,n):r},n},ho.svg.diagonal.radial=function(){var n=ho.svg.diagonal(),t=$u,e=n.projection;return n.projection=function(n){return arguments.length?e(Wu(t=n)):t},n},ho.svg.symbol=function(){function n(n,r){return(Hl.get(t.call(this,n,r))||Ku)(e.call(this,n,r))}var t=Gu,e=Ju;return n.type=function(e){return arguments.length?(t=qn(e),n):t},n.size=function(t){return arguments.length?(e=qn(t),n):e},n};var Hl=ho.map({circle:Ku,cross:function(n){var t=Math.sqrt(n/5)/2;return"M"+-3*t+","+-t+"H"+-t+"V"+-3*t+"H"+t+"V"+-t+"H"+3*t+"V"+t+"H"+t+"V"+3*t+"H"+-t+"V"+t+"H"+-3*t+"Z"},diamond:function(n){var t=Math.sqrt(n/(2*Il)),e=t*Il;return"M0,"+-t+"L"+e+",0 0,"+t+" "+-e+",0Z"},square:function(n){var t=Math.sqrt(n)/2;return"M"+-t+","+-t+"L"+t+","+-t+" "+t+","+t+" "+-t+","+t+"Z"},"triangle-down":function(n){var t=Math.sqrt(n/Ol),e=t*Ol/2;return"M0,"+e+"L"+t+","+-e+" "+-t+","+-e+"Z"},"triangle-up":function(n){var t=Math.sqrt(n/Ol),e=t*Ol/2;return"M0,"+-e+"L"+t+","+e+" "+-t+","+e+"Z"}});ho.svg.symbolTypes=Hl.keys();var Ol=Math.sqrt(3),Il=Math.tan(30*Bo);qo.transition=function(n){for(var t,e,r=Yl||++Xl,i=ro(n),u=[],o=Zl||{time:Date.now(),ease:Lr,delay:0,duration:250},a=-1,l=this.length;++a<l;){u.push(t=[]);for(var c=this[a],f=-1,s=c.length;++f<s;)(e=c[f])&&io(e,f,i,r,o),t.push(e)}return no(u,i,r)},qo.interrupt=function(n){return this.each(null==n?Vl:Qu(ro(n)))};var Yl,Zl,Vl=Qu(ro()),Bl=[],Xl=0;Bl.call=qo.call,Bl.empty=qo.empty,Bl.node=qo.node,Bl.size=qo.size,ho.transition=function(n,t){return n&&n.transition?Yl?n.transition(t):n:ho.selection().transition(n)},ho.transition.prototype=Bl,Bl.select=function(n){var t,e,r,i=this.id,u=this.namespace,o=[];n=T(n);for(var a=-1,l=this.length;++a<l;){o.push(t=[]);for(var c=this[a],f=-1,s=c.length;++f<s;)(r=c[f])&&(e=n.call(r,r.__data__,f,a))?("__data__"in r&&(e.__data__=r.__data__),io(e,f,u,i,r[u][i]),t.push(e)):t.push(null)}return no(o,u,i)},Bl.selectAll=function(n){var t,e,r,i,u,o=this.id,a=this.namespace,l=[];n=P(n);for(var c=-1,f=this.length;++c<f;)for(var s=this[c],h=-1,p=s.length;++h<p;)if(r=s[h]){u=r[a][o],e=n.call(r,r.__data__,h,c),l.push(t=[]);for(var g=-1,d=e.length;++g<d;)(i=e[g])&&io(i,g,a,o,u),t.push(i)}return no(l,a,o)},Bl.filter=function(n){var t,e,r,i=[];"function"!=typeof n&&(n=B(n));for(var u=0,o=this.length;u<o;u++){i.push(t=[]);for(var e=this[u],a=0,l=e.length;a<l;a++)(r=e[a])&&n.call(r,r.__data__,a,u)&&t.push(r)}return no(i,this.namespace,this.id)},Bl.tween=function(n,t){var e=this.id,r=this.namespace;return arguments.length<2?this.node()[r][e].tween.get(n):$(this,null==t?function(t){t[r][e].tween.remove(n)}:function(i){i[r][e].tween.set(n,t)})},Bl.attr=function(n,t){function e(){this.removeAttribute(a)}function r(){this.removeAttributeNS(a.space,a.local)}function i(n){return null==n?e:(n+="",function(){var t,e=this.getAttribute(a);return e!==n&&(t=o(e,n),function(n){this.setAttribute(a,t(n))})})}function u(n){return null==n?r:(n+="",function(){var t,e=this.getAttributeNS(a.space,a.local);return e!==n&&(t=o(e,n),function(n){this.setAttributeNS(a.space,a.local,t(n))})})}if(arguments.length<2){for(t in n)this.attr(t,n[t]);return this}var o="transform"==n?Kr:kr,a=ho.ns.qualify(n);return to(this,"attr."+n,t,a.local?u:i)},Bl.attrTween=function(n,t){function e(n,e){var r=t.call(this,n,e,this.getAttribute(i));return r&&function(n){this.setAttribute(i,r(n))}}function r(n,e){var r=t.call(this,n,e,this.getAttributeNS(i.space,i.local));return r&&function(n){this.setAttributeNS(i.space,i.local,r(n))}}var i=ho.ns.qualify(n);return this.tween("attr."+n,i.local?r:e)},Bl.style=function(n,t,e){function r(){this.style.removeProperty(n)}function i(t){return null==t?r:(t+="",function(){var r,i=o(this).getComputedStyle(this,null).getPropertyValue(n);return i!==t&&(r=kr(i,t),function(t){this.style.setProperty(n,r(t),e)})})}var u=arguments.length;if(u<3){if("string"!=typeof n){u<2&&(t="");for(e in n)this.style(e,n[e],t);return this}e=""}return to(this,"style."+n,t,i)},Bl.styleTween=function(n,t,e){function r(r,i){var u=t.call(this,r,i,o(this).getComputedStyle(this,null).getPropertyValue(n));return u&&function(t){this.style.setProperty(n,u(t),e)}}return arguments.length<3&&(e=""),this.tween("style."+n,r)},Bl.text=function(n){return to(this,"text",n,eo)},Bl.remove=function(){var n=this.namespace;return this.each("end.transition",function(){var t;this[n].count<2&&(t=this.parentNode)&&t.removeChild(this)})},Bl.ease=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].ease:("function"!=typeof n&&(n=ho.ease.apply(ho,arguments)),$(this,function(r){r[e][t].ease=n}))},Bl.delay=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].delay:$(this,"function"==typeof n?function(r,i,u){r[e][t].delay=+n.call(r,r.__data__,i,u)}:(n=+n,function(r){r[e][t].delay=n}))},Bl.duration=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].duration:$(this,"function"==typeof n?function(r,i,u){r[e][t].duration=Math.max(1,n.call(r,r.__data__,i,u))}:(n=Math.max(1,n),function(r){r[e][t].duration=n}))},Bl.each=function(n,t){var e=this.id,r=this.namespace;if(arguments.length<2){var i=Zl,u=Yl;try{Yl=e,$(this,function(t,i,u){Zl=t[r][e],n.call(t,t.__data__,i,u)})}finally{Zl=i,Yl=u}}else $(this,function(i){var u=i[r][e];(u.event||(u.event=ho.dispatch("start","end","interrupt"))).on(n,t)});return this},Bl.transition=function(){for(var n,t,e,r,i=this.id,u=++Xl,o=this.namespace,a=[],l=0,c=this.length;l<c;l++){a.push(n=[]);for(var t=this[l],f=0,s=t.length;f<s;f++)(e=t[f])&&(r=e[o][i],io(e,f,o,u,{time:r.time,ease:r.ease,delay:r.delay+r.duration,duration:r.duration})),n.push(e)}return no(a,o,u)},ho.svg.axis=function(){function n(n){n.each(function(){var n,c=ho.select(this),f=this.__chart__||e,s=this.__chart__=e.copy(),h=null==l?s.ticks?s.ticks.apply(s,a):s.domain():l,p=null==t?s.tickFormat?s.tickFormat.apply(s,a):w:t,g=c.selectAll(".tick").data(h,s),d=g.enter().insert("g",".domain").attr("class","tick").style("opacity",Ho),v=ho.transition(g.exit()).style("opacity",Ho).remove(),y=ho.transition(g.order()).style("opacity",1),m=Math.max(i,0)+o,x=Wi(s),M=c.selectAll(".domain").data([0]),b=(M.enter().append("path").attr("class","domain"),ho.transition(M));d.append("line"),d.append("text");var _,k,S,N,E=d.select("line"),A=y.select("line"),z=g.select("text").text(p),C=d.select("text"),L=y.select("text"),q="top"===r||"left"===r?-1:1;if("bottom"===r||"top"===r?(n=uo,_="x",S="y",k="x2",N="y2",z.attr("dy",q<0?"0em":".71em").style("text-anchor","middle"),b.attr("d","M"+x[0]+","+q*u+"V0H"+x[1]+"V"+q*u)):(n=oo,_="y",S="x",k="y2",N="x2",z.attr("dy",".32em").style("text-anchor",q<0?"end":"start"),b.attr("d","M"+q*u+","+x[0]+"H0V"+x[1]+"H"+q*u)),E.attr(N,q*i),C.attr(S,q*m),A.attr(k,0).attr(N,q*i),L.attr(_,0).attr(S,q*m),s.rangeBand){var T=s,P=T.rangeBand()/2;f=s=function(n){return T(n)+P}}else f.rangeBand?f=s:v.call(n,s,f);d.call(n,f,s),y.call(n,s,s)})}var t,e=ho.scale.linear(),r=$l,i=6,u=6,o=3,a=[10],l=null;return n.scale=function(t){return arguments.length?(e=t,n):e},n.orient=function(t){return arguments.length?(r=t in Wl?t+"":$l,n):r},n.ticks=function(){return arguments.length?(a=go(arguments),n):a},n.tickValues=function(t){return arguments.length?(l=t,n):l},n.tickFormat=function(e){return arguments.length?(t=e,n):t},n.tickSize=function(t){var e=arguments.length;return e?(i=+t,u=+arguments[e-1],n):i},n.innerTickSize=function(t){return arguments.length?(i=+t,n):i},n.outerTickSize=function(t){return arguments.length?(u=+t,n):u},n.tickPadding=function(t){return arguments.length?(o=+t,n):o},n.tickSubdivide=function(){return arguments.length&&n},n};var $l="bottom",Wl={top:1,right:1,bottom:1,left:1};ho.svg.brush=function(){function n(u){u.each(function(){var u=ho.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",i).on("touchstart.brush",i),o=u.selectAll(".background").data([0]);o.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),u.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var a=u.selectAll(".resize").data(d,w);a.exit().remove(),a.enter().append("g").attr("class",function(n){return"resize "+n}).style("cursor",function(n){return Jl[n]}).append("rect").attr("x",function(n){return/[ew]$/.test(n)?-3:null}).attr("y",function(n){return/^[ns]/.test(n)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),a.style("display",n.empty()?"none":null);var l,s=ho.transition(u),h=ho.transition(o);c&&(l=Wi(c),h.attr("x",l[0]).attr("width",l[1]-l[0]),e(s)),f&&(l=Wi(f),h.attr("y",l[0]).attr("height",l[1]-l[0]),r(s)),t(s)})}function t(n){n.selectAll(".resize").attr("transform",function(n){return"translate("+s[+/e$/.test(n)]+","+h[+/^s/.test(n)]+")"})}function e(n){n.select(".extent").attr("x",s[0]),n.selectAll(".extent,.n>rect,.s>rect").attr("width",s[1]-s[0])}function r(n){n.select(".extent").attr("y",h[0]),n.selectAll(".extent,.e>rect,.w>rect").attr("height",h[1]-h[0])}function i(){function i(){32==ho.event.keyCode&&(A||(x=null,L[0]-=s[1],L[1]-=h[1],A=2),z())}function d(){32==ho.event.keyCode&&2==A&&(L[0]+=s[1],L[1]+=h[1],A=0,z())}function v(){var n=ho.mouse(b),i=!1;M&&(n[0]+=M[0],n[1]+=M[1]),A||(ho.event.altKey?(x||(x=[(s[0]+s[1])/2,(h[0]+h[1])/2]),L[0]=s[+(n[0]<x[0])],L[1]=h[+(n[1]<x[1])]):x=null),N&&y(n,c,0)&&(e(k),i=!0),E&&y(n,f,1)&&(r(k),i=!0),i&&(t(k),w({type:"brush",mode:A?"move":"resize"}))}function y(n,t,e){var r,i,o=Wi(t),l=o[0],c=o[1],f=L[e],d=e?h:s,v=d[1]-d[0];if(A&&(l-=f,c-=v+f),r=(e?g:p)?Math.max(l,Math.min(c,n[e])):n[e],A?i=(r+=f)+v:(x&&(f=Math.max(l,Math.min(c,2*x[e]-r))),f<r?(i=r,r=f):i=f),d[0]!=r||d[1]!=i)return e?a=null:u=null,d[0]=r,d[1]=i,!0}function m(){v(),k.style("pointer-events","all").selectAll(".resize").style("display",n.empty()?"none":null),ho.select("body").style("cursor",null),q.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),C(),w({type:"brushend"})}var x,M,b=this,_=ho.select(ho.event.target),w=l.of(b,arguments),k=ho.select(b),S=_.datum(),N=!/^(n|s)$/.test(S)&&c,E=!/^(e|w)$/.test(S)&&f,A=_.classed("extent"),C=nn(b),L=ho.mouse(b),q=ho.select(o(b)).on("keydown.brush",i).on("keyup.brush",d);if(ho.event.changedTouches?q.on("touchmove.brush",v).on("touchend.brush",m):q.on("mousemove.brush",v).on("mouseup.brush",m),k.interrupt().selectAll("*").interrupt(),A)L[0]=s[0]-L[0],L[1]=h[0]-L[1];else if(S){var T=+/w$/.test(S),P=+/^n/.test(S);M=[s[1-T]-L[0],h[1-P]-L[1]],L[0]=s[T],L[1]=h[P]}else ho.event.altKey&&(x=L.slice());k.style("pointer-events","none").selectAll(".resize").style("display",null),ho.select("body").style("cursor",_.style("cursor")),w({type:"brushstart"}),v()}var u,a,l=L(n,"brushstart","brush","brushend"),c=null,f=null,s=[0,0],h=[0,0],p=!0,g=!0,d=Gl[0];return n.event=function(n){n.each(function(){var n=l.of(this,arguments),t={x:s,y:h,i:u,j:a},e=this.__chart__||t;this.__chart__=t,Yl?ho.select(this).transition().each("start.brush",function(){u=e.i,a=e.j,s=e.x,h=e.y,n({type:"brushstart"})}).tween("brush:brush",function(){var e=Sr(s,t.x),r=Sr(h,t.y);return u=a=null,function(i){s=t.x=e(i),h=t.y=r(i),n({type:"brush",mode:"resize"})}}).each("end.brush",function(){u=t.i,a=t.j,n({type:"brush",mode:"resize"}),n({type:"brushend"})}):(n({type:"brushstart"}),n({type:"brush",mode:"resize"}),n({type:"brushend"}))})},n.x=function(t){return arguments.length?(c=t,d=Gl[!c<<1|!f],n):c},n.y=function(t){return arguments.length?(f=t,d=Gl[!c<<1|!f],n):f},n.clamp=function(t){return arguments.length?(c&&f?(p=!!t[0],g=!!t[1]):c?p=!!t:f&&(g=!!t),n):c&&f?[p,g]:c?p:f?g:null},n.extent=function(t){var e,r,i,o,l;return arguments.length?(c&&(e=t[0],r=t[1],f&&(e=e[0],r=r[0]),u=[e,r],c.invert&&(e=c(e),r=c(r)),r<e&&(l=e,e=r,r=l),e==s[0]&&r==s[1]||(s=[e,r])),f&&(i=t[0],o=t[1],c&&(i=i[1],o=o[1]),a=[i,o],f.invert&&(i=f(i),o=f(o)),o<i&&(l=i,i=o,o=l),i==h[0]&&o==h[1]||(h=[i,o])),n):(c&&(u?(e=u[0],r=u[1]):(e=s[0],r=s[1],c.invert&&(e=c.invert(e),r=c.invert(r)),r<e&&(l=e,e=r,r=l))),f&&(a?(i=a[0],o=a[1]):(i=h[0],o=h[1],f.invert&&(i=f.invert(i),o=f.invert(o)),o<i&&(l=i,i=o,o=l))),c&&f?[[e,i],[r,o]]:c?[e,r]:f&&[i,o])},n.clear=function(){return n.empty()||(s=[0,0],h=[0,0],u=a=null),n},n.empty=function(){return!!c&&s[0]==s[1]||!!f&&h[0]==h[1]},ho.rebind(n,l,"on")};var Jl={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Gl=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],Kl=ya.format=wa.timeFormat,Ql=Kl.utc,nc=Ql("%Y-%m-%dT%H:%M:%S.%LZ");Kl.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?ao:nc,ao.parse=function(n){var t=new Date(n);return isNaN(t)?null:t},ao.toString=nc.toString,ya.second=Bn(function(n){return new ma(1e3*Math.floor(n/1e3))},function(n,t){n.setTime(n.getTime()+1e3*Math.floor(t))},function(n){return n.getSeconds()}),ya.seconds=ya.second.range,ya.seconds.utc=ya.second.utc.range,ya.minute=Bn(function(n){return new ma(6e4*Math.floor(n/6e4))},function(n,t){n.setTime(n.getTime()+6e4*Math.floor(t))},function(n){return n.getMinutes()}),ya.minutes=ya.minute.range,ya.minutes.utc=ya.minute.utc.range,ya.hour=Bn(function(n){var t=n.getTimezoneOffset()/60;return new ma(36e5*(Math.floor(n/36e5-t)+t))},function(n,t){n.setTime(n.getTime()+36e5*Math.floor(t))},function(n){return n.getHours()}),ya.hours=ya.hour.range,ya.hours.utc=ya.hour.utc.range,ya.month=Bn(function(n){return n=ya.day(n),n.setDate(1),n},function(n,t){n.setMonth(n.getMonth()+t)},function(n){return n.getMonth()}),ya.months=ya.month.range,ya.months.utc=ya.month.utc.range;var tc=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],ec=[[ya.second,1],[ya.second,5],[ya.second,15],[ya.second,30],[ya.minute,1],[ya.minute,5],[ya.minute,15],[ya.minute,30],[ya.hour,1],[ya.hour,3],[ya.hour,6],[ya.hour,12],[ya.day,1],[ya.day,2],[ya.week,1],[ya.month,1],[ya.month,3],[ya.year,1]],rc=Kl.multi([[".%L",function(n){return n.getMilliseconds()}],[":%S",function(n){return n.getSeconds()}],["%I:%M",function(n){return n.getMinutes()}],["%I %p",function(n){return n.getHours()}],["%a %d",function(n){return n.getDay()&&1!=n.getDate()}],["%b %d",function(n){return 1!=n.getDate()}],["%B",function(n){return n.getMonth()}],["%Y",Rt]]),ic={range:function(n,t,e){return ho.range(Math.ceil(n/e)*e,+t,e).map(co)},floor:w,ceil:w};ec.year=ya.year,ya.scale=function(){return lo(ho.scale.linear(),ec,rc)};var uc=ec.map(function(n){return[n[0].utc,n[1]]}),oc=Ql.multi([[".%L",function(n){return n.getUTCMilliseconds()}],[":%S",function(n){return n.getUTCSeconds()}],["%I:%M",function(n){return n.getUTCMinutes()}],["%I %p",function(n){return n.getUTCHours()}],["%a %d",function(n){return n.getUTCDay()&&1!=n.getUTCDate()}],["%b %d",function(n){return 1!=n.getUTCDate()}],["%B",function(n){return n.getUTCMonth()}],["%Y",Rt]]);uc.year=ya.year.utc,ya.scale.utc=function(){return lo(ho.scale.linear(),uc,oc)},ho.text=Tn(function(n){return n.responseText}),ho.json=function(n,t){return Pn(n,"application/json",fo,t)},ho.html=function(n,t){return Pn(n,"text/html",so,t)},ho.xml=Tn(function(n){return n.responseXML}),this.d3=ho,r=ho,i="function"==typeof r?r.call(t,e,t,n):r,!(void 0!==i&&(n.exports=i))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,